{"ast":null,"code":"// import 'bootstrap/dist/css/bootstrap.min.css';\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom';\n// import axios from 'axios';\n// import './ProjectDetails.css'; // Import custom CSS\n\n// function ProjectDetails() {\n//   const { projectId } = useParams(); // Get projectId from URL\n//   const [project, setProject] = useState(null);\n//   const navigate = useNavigate();\n//   const [isProjectTask,setisProjectTask]=useState(false);\n//   const [projectTasks, setProjectTasks] = useState([]);\n//   const [isTeamMembers,setisTeamMembers]=useState(false);\n//   const [teamMembers, setTeamMembers] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false); // State for handling edit mode\n//   const [editedProject, setEditedProject] = useState({});\n//   const [newTeamMember, setNewTeamMember] = useState(''); // Input for adding a new team member\n//   const [showTeamModal, setShowTeamModal] = useState(false); // Modal visibility\n\n//   useEffect(() => {\n//     const fetchProjectDetails = async () => {\n//       try {\n//         // Fetch project details, tasks, and team members\n//         const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n//         let{ project, tasks,teamMembers } = response.data;\n//         teamMembers=project.teamMembers;\n//         console.log(project);\n//         console.log(tasks);\n//         console.log(teamMembers);\n\n//         if(tasks){\n//           setProjectTasks(tasks);\n//           setisProjectTask(true);\n//         }\n//         setProject(project);\n//         if(teamMembers){\n\n//           setisTeamMembers(true);\n//         }\n//         setTeamMembers(teamMembers||[]);\n//         setEditedProject(project);\n//       } catch (err) {\n//         console.error('Error fetching project details:', err);\n//       }\n//     };\n\n//     fetchProjectDetails();\n//   }, [projectId]);\n\n//   // Handle input changes for the editable form\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setEditedProject({ ...editedProject, [name]: value });\n//   };\n\n//   // Function to save the updated project details\n\n//   const handleSave = async () => {\n//     try {\n\n//       await axios.patch(`http://localhost:5000/api/project/${projectId}`, editedProject);\n//       setProject(editedProject);\n//       setIsEditing(false);\n//     } catch (err) {\n//       console.error('Error updating project:', err);\n//     }\n//   };\n\n//   const handleAddTeamMember = async () => {\n//     try {\n//       const response = await axios.post(`http://localhost:5000/api/project/${projectId}/team`, {\n//         userId: newTeamMember,\n//       });\n//       setTeamMembers([...teamMembers, response.data]); // Update team members\n//       setNewTeamMember('');\n//     } catch (err) {\n//       console.error('Error adding team member:', err);\n//     }\n//   };\n\n//   // Handle removing a team member\n//   const handleRemoveTeamMember = async (memberId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/project/${projectId}/team/${memberId}`);\n//       setTeamMembers(teamMembers.filter((member) => member._id !== memberId));\n//     } catch (err) {\n//       console.error('Error removing team member:', err);\n//     }\n//   };\n\n//   // Handle opening of the modal\n//   const openEditModal = () => {\n//     setIsEditing(true);\n//     document.body.classList.add('body-no-scroll'); // Disable scrolling\n//   };\n\n//   // Handle closing of the modal\n//   const closeEditModal = () => {\n//     setIsEditing(false);\n//     document.body.classList.remove('body-no-scroll'); // Re-enable scrolling\n//   };\n\n//   const openTeamModal = () => {\n//     setShowTeamModal(true);\n//   };\n\n//   // Close the modal\n//   const closeTeamModal = () => {\n//     setShowTeamModal(false);\n//   };\n//   if (!project) {\n//     return <div>Loading project details...</div>;\n//   }\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h1 className=\"text-center mb-4\" id=\"heading1\">Project Details</h1>\n\n//       {/* Project Overview Section */}\n//       <div className=\"card shadow-sm mb-4\">\n//         <div className=\"card-body\">\n//           <div className=\"d-flex justify-content-between\">\n//             <h2 className=\"card-title\">{project?.name}</h2>\n//             <button className=\"btn btn-primary\" onClick={openEditModal}>\n//               Edit\n//             </button>\n//           </div>\n//           <p className=\"card-text\">{project?.description}</p>\n//           <h4 className=\"card-title\">\n//             <pre style={{ fontFamily: 'inherit' }}>\n//               Start Date: {new Date(project.startDate).toLocaleDateString()}          <span style={{ color: 'red' }}>Due Date:</span> {new Date(project.endDate).toLocaleDateString()}\n//             </pre>\n//           </h4>\n\n//           <span className={`badge ${project?.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//             {project?.status}\n//           </span>\n//         </div>\n//       </div>\n\n//       {/* Tasks Section */}\n//       <div className=\"card shadow-sm mb-4\">\n//         <div className=\"card-header d-flex justify-content-between align-items-center\">\n//           <h3>Tasks</h3>\n//           <button\n//             className=\"btn btn-outline-primary\"\n//             onClick={() => navigate(`/taskspage/${project._id}`)}\n//           >\n//             Manage\n//           </button>\n//         </div>\n\n// {isProjectTask &&      (\n//     <ul className=\"list-group list-group-flush\">\n//           {projectTasks.map((task) => (\n//             <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={task._id}\n//             onClick={() => navigate(`/task-details/${task._id}`)} // Navigate when clicking the li element\n//             style={{ cursor: 'pointer' }} // Add pointer cursor for better UX  \n//             >\n//                 {task.name}\n//               <span className={`badge ${task.status === 'Completed' ? 'bg-success' : task.status === 'Ongoing' ? 'bg-warning' : 'bg-secondary'}`}>\n//                 {task.status}\n//               </span>\n//             </li>\n//           ))}\n//         </ul>\n// )}\n//       </div>\n\n//       <div className=\"card shadow-sm\">\n//         <div className=\"card-header d-flex justify-content-between align-items-center\">\n//           <h3>Team Members</h3>\n//           <button \n//             className=\"btn btn-outline-primary\" \n//             onClick={openTeamModal}\n//           >\n//             Manage\n//           </button>\n//         </div>\n//         {teamMembers.length > 0 && (\n//           <ul className=\"list-group list-group-flush\">\n//             {teamMembers.map((member) => (\n//               <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={member._id}>\n//                 {member.user_id.name} - <span className=\"text-muted\">{member.role}</span>\n//                 <button className=\"btn btn-danger\" onClick={() => handleRemoveTeamMember(member._id)}>\n//                   Remove\n//                 </button>\n//               </li>\n//             ))}\n//           </ul>\n//         )}\n//       </div>\n\n//       {/* Modal for Managing Team Members */}\n//       {showTeamModal && (\n//         <div className=\"modal fade show d-block\" tabIndex=\"-1\">\n//           <div className=\"modal-dialog\">\n//             <div className=\"modal-content\">\n//               <div className=\"modal-header\">\n//                 <h5 className=\"modal-title\">Manage Team Members</h5>\n//                 <button type=\"button\" className=\"btn-close\" onClick={closeTeamModal}></button>\n//               </div>\n//               <div className=\"modal-body\">\n//                 <input\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   placeholder=\"Enter user ID\"\n//                   value={newTeamMember}\n//                   onChange={(e) => setNewTeamMember(e.target.value)}\n//                 />\n//               </div>\n//               <div className=\"modal-footer\">\n//                 <button className=\"btn btn-secondary\" onClick={closeTeamModal}>Close</button>\n//                 <button className=\"btn btn-primary\" onClick={handleAddTeamMember}>Add Member</button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n\n//       {/* Editable Form Modal (Backdrop) */}\n//       {isEditing && (\n//         <div className=\"backdrop\">\n//           <div className=\"modal-content p-4\">\n//             <h3>Edit Project Details</h3>\n//             <div className=\"form-group\">\n//               <label>Project Name</label>\n//               <input\n//                 type=\"text\"\n//                 className=\"form-control\"\n//                 name=\"name\"\n//                 value={editedProject.name}\n//                 onChange={handleInputChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label>Description</label>\n//               <textarea\n//                 className=\"form-control\"\n//                 name=\"description\"\n//                 value={editedProject.description}\n//                 onChange={handleInputChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label>Start Date</label>\n//               <input\n//                 type=\"date\"\n//                 className=\"form-control\"\n//                 name=\"startDate\"\n//                 value={new Date(editedProject.startDate).toISOString().substr(0, 10)}\n//                 onChange={handleInputChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label>End Date</label>\n//               <input\n//                 type=\"date\"\n//                 className=\"form-control\"\n//                 name=\"endDate\"\n//                 value={new Date(editedProject.endDate).toISOString().substr(0, 10)}\n//                 onChange={handleInputChange}\n//               />\n//             </div>\n//             <div className=\"form-group\">\n//               <label>Status</label>\n//               <select\n//                 className=\"form-control\"\n//                 name=\"status\"\n//                 value={editedProject.status}\n//                 onChange={handleInputChange}\n//               >\n//                 <option value=\"Active\">Active</option>\n//                 <option value=\"Completed\">Completed</option>\n//               </select>\n//             </div>\n//             <div className=\"d-flex justify-content-end\">\n//               <button className=\"btn btn-secondary ms-3\" onClick={closeEditModal}>\n//                 Cancel\n//               </button>\n//               <button className=\"btn btn-primary ms-3\" onClick={handleSave}>\n//                 Save\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ProjectDetails;","map":{"version":3,"names":[],"sources":["F:/Project-Management-App/frontend/src/components/ProjectDetails.js"],"sourcesContent":["// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import { useNavigate, useParams } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import './ProjectDetails.css'; // Import custom CSS\r\n\r\n// function ProjectDetails() {\r\n//   const { projectId } = useParams(); // Get projectId from URL\r\n//   const [project, setProject] = useState(null);\r\n//   const navigate = useNavigate();\r\n//   const [isProjectTask,setisProjectTask]=useState(false);\r\n//   const [projectTasks, setProjectTasks] = useState([]);\r\n//   const [isTeamMembers,setisTeamMembers]=useState(false);\r\n//   const [teamMembers, setTeamMembers] = useState([]);\r\n//   const [isEditing, setIsEditing] = useState(false); // State for handling edit mode\r\n//   const [editedProject, setEditedProject] = useState({});\r\n//   const [newTeamMember, setNewTeamMember] = useState(''); // Input for adding a new team member\r\n//   const [showTeamModal, setShowTeamModal] = useState(false); // Modal visibility\r\n\r\n//   useEffect(() => {\r\n//     const fetchProjectDetails = async () => {\r\n//       try {\r\n//         // Fetch project details, tasks, and team members\r\n//         const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\r\n//         let{ project, tasks,teamMembers } = response.data;\r\n//         teamMembers=project.teamMembers;\r\n//         console.log(project);\r\n//         console.log(tasks);\r\n//         console.log(teamMembers);\r\n\r\n//         if(tasks){\r\n//           setProjectTasks(tasks);\r\n//           setisProjectTask(true);\r\n//         }\r\n//         setProject(project);\r\n//         if(teamMembers){\r\n          \r\n//           setisTeamMembers(true);\r\n//         }\r\n//         setTeamMembers(teamMembers||[]);\r\n//         setEditedProject(project);\r\n//       } catch (err) {\r\n//         console.error('Error fetching project details:', err);\r\n//       }\r\n//     };\r\n\r\n//     fetchProjectDetails();\r\n//   }, [projectId]);\r\n\r\n//   // Handle input changes for the editable form\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setEditedProject({ ...editedProject, [name]: value });\r\n//   };\r\n\r\n//   // Function to save the updated project details\r\n\r\n//   const handleSave = async () => {\r\n//     try {\r\n\r\n//       await axios.patch(`http://localhost:5000/api/project/${projectId}`, editedProject);\r\n//       setProject(editedProject);\r\n//       setIsEditing(false);\r\n//     } catch (err) {\r\n//       console.error('Error updating project:', err);\r\n//     }\r\n//   };\r\n\r\n//   const handleAddTeamMember = async () => {\r\n//     try {\r\n//       const response = await axios.post(`http://localhost:5000/api/project/${projectId}/team`, {\r\n//         userId: newTeamMember,\r\n//       });\r\n//       setTeamMembers([...teamMembers, response.data]); // Update team members\r\n//       setNewTeamMember('');\r\n//     } catch (err) {\r\n//       console.error('Error adding team member:', err);\r\n//     }\r\n//   };\r\n\r\n//   // Handle removing a team member\r\n//   const handleRemoveTeamMember = async (memberId) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:5000/api/project/${projectId}/team/${memberId}`);\r\n//       setTeamMembers(teamMembers.filter((member) => member._id !== memberId));\r\n//     } catch (err) {\r\n//       console.error('Error removing team member:', err);\r\n//     }\r\n//   };\r\n\r\n//   // Handle opening of the modal\r\n//   const openEditModal = () => {\r\n//     setIsEditing(true);\r\n//     document.body.classList.add('body-no-scroll'); // Disable scrolling\r\n//   };\r\n\r\n//   // Handle closing of the modal\r\n//   const closeEditModal = () => {\r\n//     setIsEditing(false);\r\n//     document.body.classList.remove('body-no-scroll'); // Re-enable scrolling\r\n//   };\r\n\r\n//   const openTeamModal = () => {\r\n//     setShowTeamModal(true);\r\n//   };\r\n\r\n//   // Close the modal\r\n//   const closeTeamModal = () => {\r\n//     setShowTeamModal(false);\r\n//   };\r\n//   if (!project) {\r\n//     return <div>Loading project details...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h1 className=\"text-center mb-4\" id=\"heading1\">Project Details</h1>\r\n\r\n//       {/* Project Overview Section */}\r\n//       <div className=\"card shadow-sm mb-4\">\r\n//         <div className=\"card-body\">\r\n//           <div className=\"d-flex justify-content-between\">\r\n//             <h2 className=\"card-title\">{project?.name}</h2>\r\n//             <button className=\"btn btn-primary\" onClick={openEditModal}>\r\n//               Edit\r\n//             </button>\r\n//           </div>\r\n//           <p className=\"card-text\">{project?.description}</p>\r\n//           <h4 className=\"card-title\">\r\n//             <pre style={{ fontFamily: 'inherit' }}>\r\n//               Start Date: {new Date(project.startDate).toLocaleDateString()}          <span style={{ color: 'red' }}>Due Date:</span> {new Date(project.endDate).toLocaleDateString()}\r\n//             </pre>\r\n//           </h4>\r\n          \r\n//           <span className={`badge ${project?.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\r\n//             {project?.status}\r\n//           </span>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Tasks Section */}\r\n//       <div className=\"card shadow-sm mb-4\">\r\n//         <div className=\"card-header d-flex justify-content-between align-items-center\">\r\n//           <h3>Tasks</h3>\r\n//           <button\r\n//             className=\"btn btn-outline-primary\"\r\n//             onClick={() => navigate(`/taskspage/${project._id}`)}\r\n//           >\r\n//             Manage\r\n//           </button>\r\n//         </div>\r\n\r\n// {isProjectTask &&      (\r\n//     <ul className=\"list-group list-group-flush\">\r\n//           {projectTasks.map((task) => (\r\n//             <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={task._id}\r\n//             onClick={() => navigate(`/task-details/${task._id}`)} // Navigate when clicking the li element\r\n//             style={{ cursor: 'pointer' }} // Add pointer cursor for better UX  \r\n//             >\r\n//                 {task.name}\r\n//               <span className={`badge ${task.status === 'Completed' ? 'bg-success' : task.status === 'Ongoing' ? 'bg-warning' : 'bg-secondary'}`}>\r\n//                 {task.status}\r\n//               </span>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n// )}\r\n//       </div>\r\n\r\n//       <div className=\"card shadow-sm\">\r\n//         <div className=\"card-header d-flex justify-content-between align-items-center\">\r\n//           <h3>Team Members</h3>\r\n//           <button \r\n//             className=\"btn btn-outline-primary\" \r\n//             onClick={openTeamModal}\r\n//           >\r\n//             Manage\r\n//           </button>\r\n//         </div>\r\n//         {teamMembers.length > 0 && (\r\n//           <ul className=\"list-group list-group-flush\">\r\n//             {teamMembers.map((member) => (\r\n//               <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={member._id}>\r\n//                 {member.user_id.name} - <span className=\"text-muted\">{member.role}</span>\r\n//                 <button className=\"btn btn-danger\" onClick={() => handleRemoveTeamMember(member._id)}>\r\n//                   Remove\r\n//                 </button>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Modal for Managing Team Members */}\r\n//       {showTeamModal && (\r\n//         <div className=\"modal fade show d-block\" tabIndex=\"-1\">\r\n//           <div className=\"modal-dialog\">\r\n//             <div className=\"modal-content\">\r\n//               <div className=\"modal-header\">\r\n//                 <h5 className=\"modal-title\">Manage Team Members</h5>\r\n//                 <button type=\"button\" className=\"btn-close\" onClick={closeTeamModal}></button>\r\n//               </div>\r\n//               <div className=\"modal-body\">\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   className=\"form-control\"\r\n//                   placeholder=\"Enter user ID\"\r\n//                   value={newTeamMember}\r\n//                   onChange={(e) => setNewTeamMember(e.target.value)}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"modal-footer\">\r\n//                 <button className=\"btn btn-secondary\" onClick={closeTeamModal}>Close</button>\r\n//                 <button className=\"btn btn-primary\" onClick={handleAddTeamMember}>Add Member</button>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n \r\n\r\n//       {/* Editable Form Modal (Backdrop) */}\r\n//       {isEditing && (\r\n//         <div className=\"backdrop\">\r\n//           <div className=\"modal-content p-4\">\r\n//             <h3>Edit Project Details</h3>\r\n//             <div className=\"form-group\">\r\n//               <label>Project Name</label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 className=\"form-control\"\r\n//                 name=\"name\"\r\n//                 value={editedProject.name}\r\n//                 onChange={handleInputChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <label>Description</label>\r\n//               <textarea\r\n//                 className=\"form-control\"\r\n//                 name=\"description\"\r\n//                 value={editedProject.description}\r\n//                 onChange={handleInputChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <label>Start Date</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 className=\"form-control\"\r\n//                 name=\"startDate\"\r\n//                 value={new Date(editedProject.startDate).toISOString().substr(0, 10)}\r\n//                 onChange={handleInputChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <label>End Date</label>\r\n//               <input\r\n//                 type=\"date\"\r\n//                 className=\"form-control\"\r\n//                 name=\"endDate\"\r\n//                 value={new Date(editedProject.endDate).toISOString().substr(0, 10)}\r\n//                 onChange={handleInputChange}\r\n//               />\r\n//             </div>\r\n//             <div className=\"form-group\">\r\n//               <label>Status</label>\r\n//               <select\r\n//                 className=\"form-control\"\r\n//                 name=\"status\"\r\n//                 value={editedProject.status}\r\n//                 onChange={handleInputChange}\r\n//               >\r\n//                 <option value=\"Active\">Active</option>\r\n//                 <option value=\"Completed\">Completed</option>\r\n//               </select>\r\n//             </div>\r\n//             <div className=\"d-flex justify-content-end\">\r\n//               <button className=\"btn btn-secondary ms-3\" onClick={closeEditModal}>\r\n//                 Cancel\r\n//               </button>\r\n//               <button className=\"btn btn-primary ms-3\" onClick={handleSave}>\r\n//                 Save\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ProjectDetails;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}