{"ast":null,"code":"var _jsxFileName = \"F:\\\\Project-Management-App\\\\frontend\\\\src\\\\components\\\\TasksPage.js\",\n  _s = $RefreshSig$();\n// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // For navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => {\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const { user } = useAuth(); // Auth context to get the current user\n//   const [showTaskForm, setShowTaskForm] = useState({}); // Control task form visibility for each project\n//   const [tasks,setTasks]=useState([]);\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] });\n//   const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n//     const fetchProjectsAndTasks = async () => {\n//       try {\n//         if (!user) {\n//           console.log(\"User is not logged in.\");\n//           return; // Exit if user is not logged in\n//         }\n//         console.log(user);\n//         const token = localStorage.getItem('token'); // Fetch token from storage\n//     const response = await axios.get(`http://localhost:5000/api/user/${user.id}`, {\n//       headers: {\n//         Authorization: `Bearer ${token}` // Pass token in the Authorization header\n//       }\n//     });\n//         const fetchedProjects = response.data.user.projects;\n//         const fetchedTasks=response.data.user.tasks;\n//         setProjects(fetchedProjects); \n//         setTasks(fetchedTasks);\n//         console.log(fetchedTasks);\n//         // Set the projects state\n//         console.log(fetchedProjects);\n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [user]);\n\n//   // Handle adding a new task\n//   const handleAddTask = async (projectId) => {\n//     try {\n//       console.log(\"Creating task with data:\", newTask); \n//       const response = await axios.post(`http://localhost:5000/api/task/${projectId}`, newTask);\n//       setProjects((prevProjects) => prevProjects.map((project) =>\n//         project._id === projectId ? { ...project, tasks: [...project.tasks, response.data] } : project\n//       ));\n//       setShowTaskForm((prev) => ({ ...prev, [projectId]: false })); // Hide the task form after adding the task\n//       setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] }); // Reset the task form\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//     }\n//   };\n\n//   // Function to remove a task\n//   const handleRemoveTask = async (taskId, projectId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/task/${projectId}/${taskId}`);\n//       setProjects((prevProjects) =>\n//         prevProjects.map((project) =>\n//           project._id === projectId\n//             ? { ...project, tasks: project.tasks.filter((task) => task._id !== taskId) }\n//             : project\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error removing task:\", error);\n//     }\n//   };\n\n//   // Fetch team members for a project\n//   const fetchTeamMembers = async (projectId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n//       setTeamMembers(response.data.teamMembers); // Set the list of team members\n//     } catch (error) {\n//       console.error(\"Error fetching team members:\", error);\n//     }\n//   };\n\n//   // Handle the form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewTask({ ...newTask, [name]: value });\n//   };\n\n//   const handleAssignedToChange = (e) => {\n//     // Convert the selected options into an array of values\n//     const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n\n//     // Update the newTask state with the selected assignedTo values\n//     setNewTask(prevTask => ({\n//         ...prevTask,\n//         assignedTo: selectedOptions  // Set the array of selected user IDs\n//     }));\n//   };\n\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               {project.created_by === user.id && (\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   onClick={() => {\n//                     setShowTaskForm((prev) => ({ ...prev, [project._id]: true }));\n//                     fetchTeamMembers(project._id); // Fetch team members when opening task form\n//                   }}\n//                 >\n//                   Add Task\n//                 </button>\n//               )}\n//             </div>\n\n//             {/* List of Tasks for the current project */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//               {tasks && tasks.filter((task) => task.project_id === project._id).length > 0 ? (\n//                 tasks.filter((task) => task.project_id === project._id).map((task) => (\n//                       <div key={task._id} className=\"col-12 mb-3\">\n//                         <div className=\"card h-100 task-card\">\n//                           <div className=\"card-body\">\n//                             <h5 className=\"card-title\">{task.name}</h5>\n//                             <p className=\"card-text\">Description: {task.description}</p>\n//                             <p className=\"card-text\">\n//                               <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                                 {task.status}\n//                               </span>\n//                             </p>\n//                             <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                             <div className=\"d-flex justify-content-between\">\n//                               <button\n//                                 className=\"btn btn-outline-primary\"\n//                                 onClick={() => navigate(`/task-details/${task._id}`)}\n//                               >\n//                                 Manage\n//                               </button>\n//                               <button\n//                                 className=\"btn btn-danger btn-sm\"\n//                                 onClick={() => handleRemoveTask(task._id, project._id)}\n//                               >\n//                                 Remove\n//                               </button>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     ))\n//                 ) : (\n//                   <p>No tasks found for this project.</p>\n//                 )}\n//               </div>\n\n//               {/* Add Task Form specific to each project */}\n//               {showTaskForm[project._id] && (\n//                 <div className=\"card task-form-card mt-4\">\n//                   <div className=\"card-body\">\n//                     <h5>Add New Task</h5>\n//                     <form>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Task Name</label>\n//                         <input\n//                           type=\"text\"\n//                           className=\"form-control\"\n//                           name=\"name\"\n//                           value={newTask.name}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Description</label>\n//                         <textarea\n//                           className=\"form-control\"\n//                           name=\"description\"\n//                           value={newTask.description}\n//                           onChange={handleInputChange}\n//                         ></textarea>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Due Date</label>\n//                         <input\n//                           type=\"date\"\n//                           className=\"form-control\"\n//                           name=\"due_date\"\n//                           value={newTask.due_date}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Assign To</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"assignedTo\"\n//                           multiple\n//                           value={newTask.assignedTo}\n//                           onChange={handleAssignedToChange}\n//                         >\n//                           {teamMembers.map((member) => (\n//                             <option key={member.user_id} value={member.user_id}>\n//                               {member.name}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Status</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"status\"\n//                           value={newTask.status}\n//                           onChange={handleInputChange}\n//                         >\n//                           <option value=\"Ongoing\">Ongoing</option>\n//                           <option value=\"Completed\">Completed</option>\n//                         </select>\n//                       </div>\n//                       <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleAddTask(project._id)}>\n//                         Add Task\n//                       </button>\n//                     </form>\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No projects found where you are a team member.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TasksPage;\n\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For navigation\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport './TasksPage.css'; // Custom styles\nimport { useAuth } from \"../AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksPage = () => {\n  _s();\n  const navigate = useNavigate(); // To navigate programmatically\n  const [projects, setProjects] = useState([]); // State for projects where user is a team member\n  const {\n    user\n  } = useAuth(); // Auth context to get the current user\n  const [showTaskForm, setShowTaskForm] = useState({}); // Control task form visibility for each project\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({\n    name: '',\n    description: '',\n    status: 'Ongoing',\n    due_date: '',\n    assignedTo: []\n  });\n  const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n  // Fetch projects and tasks when the component mounts\n  useEffect(() => {\n    const fetchProjectsAndTasks = async () => {\n      try {\n        if (!user) {\n          console.log(\"User is not logged in.\");\n          return; // Exit if user is not logged in\n        }\n        console.log(user);\n        const token = localStorage.getItem('token'); // Fetch token from storage\n        const response = await axios.get(`http://localhost:5000/api/user/${user.id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` // Pass token in the Authorization header\n          }\n        });\n        const fetchedProjects = response.data.user.projects;\n        const fetchedTasks = response.data.user.tasks;\n        setProjects(fetchedProjects);\n        setTasks(fetchedTasks);\n        console.log(fetchedTasks);\n        // Set the projects state\n        console.log(fetchedProjects);\n      } catch (error) {\n        console.error(\"Error fetching projects or tasks:\", error);\n      }\n    };\n    fetchProjectsAndTasks();\n  }, [user, t]);\n\n  // Handle adding a new task\n  const handleAddTask = async projectId => {\n    try {\n      console.log(\"Creating task with data:\", newTask);\n      const response = await axios.post(`http://localhost:5000/api/task/${projectId}`, newTask);\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? {\n        ...project,\n        tasks: [...project.tasks, response.data]\n      } : project));\n      setShowTaskForm(prev => ({\n        ...prev,\n        [projectId]: false\n      })); // Hide the task form after adding the task\n      setNewTask({\n        name: '',\n        description: '',\n        status: 'Ongoing',\n        due_date: '',\n        assignedTo: []\n      }); // Reset the task form\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Function to remove a task\n  const handleRemoveTask = async (taskId, projectId) => {\n    try {\n      await axios.delete(`http://localhost:5000/api/task/${projectId}/${taskId}`);\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? {\n        ...project,\n        tasks: project.tasks.filter(task => task._id !== taskId)\n      } : project));\n    } catch (error) {\n      console.error(\"Error removing task:\", error);\n    }\n  };\n\n  // Function to approve a task\n  const handleApproveTask = async (taskId, projectId) => {\n    try {\n      await axios.patch(`http://localhost:5000/api/task/${taskId}`, {\n        status: 'Approved'\n      });\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? {\n        ...project,\n        tasks: project.tasks.map(task => task._id === taskId ? {\n          ...task,\n          status: 'Approved'\n        } : task)\n      } : project));\n    } catch (error) {\n      console.error(\"Error approving task:\", error);\n    }\n  };\n\n  // Fetch team members for a project\n  const fetchTeamMembers = async projectId => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n      setTeamMembers(response.data.teamMembers); // Set the list of team members\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n    }\n  };\n\n  // Handle the form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewTask({\n      ...newTask,\n      [name]: value\n    });\n  };\n  const handleAssignedToChange = e => {\n    // Convert the selected options into an array of values\n    const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n\n    // Update the newTask state with the selected assignedTo values\n    setNewTask(prevTask => ({\n      ...prevTask,\n      assignedTo: selectedOptions // Set the array of selected user IDs\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container tasks-page mt-4\",\n    children: projects.length > 0 ? projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card project-detail-card mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0\",\n          children: [project.name, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`,\n            children: project.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 15\n        }, this), project.created_by === user.id && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setShowTaskForm(prev => ({\n              ...prev,\n              [project._id]: true\n            }));\n            fetchTeamMembers(project._id); // Fetch team members when opening task form\n          },\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: tasks && tasks.filter(task => task.project_id === project._id).length > 0 ? tasks.filter(task => task.project_id === project._id).map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card h-100 task-card\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"card-title\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: [\"Description: \", task.description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`,\n                    children: task.status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: [\"Due Date: \", new Date(task.due_date).toLocaleDateString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-flex justify-content-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-outline-primary\",\n                    onClick: () => navigate(`/task-details/${task._id}`),\n                    children: \"Manage\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 416,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-danger btn-sm\",\n                    onClick: () => handleRemoveTask(task._id, project._id),\n                    children: \"Remove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 422,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 415,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 23\n            }, this)\n          }, task._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No tasks found for this project.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }, this), project.created_by === user.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Approve Completed Tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: tasks.filter(task => task.project_id === project._id && task.status === 'Completed').length > 0 ? tasks.filter(task => task.project_id === project._id && task.status === 'Completed').map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12 mb-3\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card h-100 task-card\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-body\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    className: \"card-title\",\n                    children: task.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"card-text\",\n                    children: [\"Description: \", task.description]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"card-text\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"badge bg-success\",\n                      children: \"Completed\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 451,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"d-flex justify-content-between\",\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"btn btn-success btn-sm\",\n                      onClick: () => handleApproveTask(task._id, project._id),\n                      children: \"Approve\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 454,\n                      columnNumber: 33\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 453,\n                    columnNumber: 31\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 27\n              }, this)\n            }, task._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 25\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No completed tasks to approve.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }, this), showTaskForm[project._id] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Add New Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              handleAddTask(project._id);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"name\",\n                className: \"form-label\",\n                children: \"Task Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                id: \"name\",\n                name: \"name\",\n                value: newTask.name,\n                onChange: handleInputChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"description\",\n                className: \"form-label\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                className: \"form-control\",\n                id: \"description\",\n                name: \"description\",\n                value: newTask.description,\n                onChange: handleInputChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 496,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"due_date\",\n                className: \"form-label\",\n                children: \"Due Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"form-control\",\n                id: \"due_date\",\n                name: \"due_date\",\n                value: newTask.due_date,\n                onChange: handleInputChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"assignedTo\",\n                className: \"form-label\",\n                children: \"Assign To\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                className: \"form-select\",\n                id: \"assignedTo\",\n                name: \"assignedTo\",\n                multiple: true,\n                value: newTask.assignedTo,\n                onChange: handleAssignedToChange,\n                required: true,\n                children: teamMembers.map(member => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: member.user_id,\n                  children: member.name\n                }, member._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 529,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary\",\n              children: \"Add Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-secondary ms-2\",\n              onClick: () => setShowTaskForm(prev => ({\n                ...prev,\n                [project._id]: false\n              })),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 15\n      }, this)]\n    }, project._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No projects available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 376,\n    columnNumber: 5\n  }, this);\n};\n_s(TasksPage, \"Vqg/BF5nTXBEJrb7wT6HesohPgM=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = TasksPage;\nexport default TasksPage;\nvar _c;\n$RefreshReg$(_c, \"TasksPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","useAuth","jsxDEV","_jsxDEV","TasksPage","_s","navigate","projects","setProjects","user","showTaskForm","setShowTaskForm","tasks","setTasks","newTask","setNewTask","name","description","status","due_date","assignedTo","teamMembers","setTeamMembers","fetchProjectsAndTasks","console","log","token","localStorage","getItem","response","get","id","headers","Authorization","fetchedProjects","data","fetchedTasks","error","t","handleAddTask","projectId","post","prevProjects","map","project","_id","prev","handleRemoveTask","taskId","delete","filter","task","handleApproveTask","patch","fetchTeamMembers","handleInputChange","e","value","target","handleAssignedToChange","selectedOptions","Array","from","option","prevTask","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","created_by","onClick","project_id","Date","toLocaleDateString","onSubmit","preventDefault","htmlFor","type","onChange","required","multiple","member","user_id","_c","$RefreshReg$"],"sources":["F:/Project-Management-App/frontend/src/components/TasksPage.js"],"sourcesContent":["// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // For navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => {\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const { user } = useAuth(); // Auth context to get the current user\n//   const [showTaskForm, setShowTaskForm] = useState({}); // Control task form visibility for each project\n//   const [tasks,setTasks]=useState([]);\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] });\n//   const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n//     const fetchProjectsAndTasks = async () => {\n//       try {\n//         if (!user) {\n//           console.log(\"User is not logged in.\");\n//           return; // Exit if user is not logged in\n//         }\n//         console.log(user);\n//         const token = localStorage.getItem('token'); // Fetch token from storage\n//     const response = await axios.get(`http://localhost:5000/api/user/${user.id}`, {\n//       headers: {\n//         Authorization: `Bearer ${token}` // Pass token in the Authorization header\n//       }\n//     });\n//         const fetchedProjects = response.data.user.projects;\n//         const fetchedTasks=response.data.user.tasks;\n//         setProjects(fetchedProjects); \n//         setTasks(fetchedTasks);\n//         console.log(fetchedTasks);\n//         // Set the projects state\n//         console.log(fetchedProjects);\n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [user]);\n\n//   // Handle adding a new task\n//   const handleAddTask = async (projectId) => {\n//     try {\n//       console.log(\"Creating task with data:\", newTask); \n//       const response = await axios.post(`http://localhost:5000/api/task/${projectId}`, newTask);\n//       setProjects((prevProjects) => prevProjects.map((project) =>\n//         project._id === projectId ? { ...project, tasks: [...project.tasks, response.data] } : project\n//       ));\n//       setShowTaskForm((prev) => ({ ...prev, [projectId]: false })); // Hide the task form after adding the task\n//       setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] }); // Reset the task form\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//     }\n//   };\n\n//   // Function to remove a task\n//   const handleRemoveTask = async (taskId, projectId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/task/${projectId}/${taskId}`);\n//       setProjects((prevProjects) =>\n//         prevProjects.map((project) =>\n//           project._id === projectId\n//             ? { ...project, tasks: project.tasks.filter((task) => task._id !== taskId) }\n//             : project\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error removing task:\", error);\n//     }\n//   };\n\n//   // Fetch team members for a project\n//   const fetchTeamMembers = async (projectId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n//       setTeamMembers(response.data.teamMembers); // Set the list of team members\n//     } catch (error) {\n//       console.error(\"Error fetching team members:\", error);\n//     }\n//   };\n\n//   // Handle the form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewTask({ ...newTask, [name]: value });\n//   };\n\n//   const handleAssignedToChange = (e) => {\n//     // Convert the selected options into an array of values\n//     const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n\n//     // Update the newTask state with the selected assignedTo values\n//     setNewTask(prevTask => ({\n//         ...prevTask,\n//         assignedTo: selectedOptions  // Set the array of selected user IDs\n//     }));\n//   };\n\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               {project.created_by === user.id && (\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   onClick={() => {\n//                     setShowTaskForm((prev) => ({ ...prev, [project._id]: true }));\n//                     fetchTeamMembers(project._id); // Fetch team members when opening task form\n//                   }}\n//                 >\n//                   Add Task\n//                 </button>\n//               )}\n//             </div>\n\n//             {/* List of Tasks for the current project */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//               {tasks && tasks.filter((task) => task.project_id === project._id).length > 0 ? (\n//                 tasks.filter((task) => task.project_id === project._id).map((task) => (\n//                       <div key={task._id} className=\"col-12 mb-3\">\n//                         <div className=\"card h-100 task-card\">\n//                           <div className=\"card-body\">\n//                             <h5 className=\"card-title\">{task.name}</h5>\n//                             <p className=\"card-text\">Description: {task.description}</p>\n//                             <p className=\"card-text\">\n//                               <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                                 {task.status}\n//                               </span>\n//                             </p>\n//                             <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                             <div className=\"d-flex justify-content-between\">\n//                               <button\n//                                 className=\"btn btn-outline-primary\"\n//                                 onClick={() => navigate(`/task-details/${task._id}`)}\n//                               >\n//                                 Manage\n//                               </button>\n//                               <button\n//                                 className=\"btn btn-danger btn-sm\"\n//                                 onClick={() => handleRemoveTask(task._id, project._id)}\n//                               >\n//                                 Remove\n//                               </button>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     ))\n//                 ) : (\n//                   <p>No tasks found for this project.</p>\n//                 )}\n//               </div>\n\n//               {/* Add Task Form specific to each project */}\n//               {showTaskForm[project._id] && (\n//                 <div className=\"card task-form-card mt-4\">\n//                   <div className=\"card-body\">\n//                     <h5>Add New Task</h5>\n//                     <form>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Task Name</label>\n//                         <input\n//                           type=\"text\"\n//                           className=\"form-control\"\n//                           name=\"name\"\n//                           value={newTask.name}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Description</label>\n//                         <textarea\n//                           className=\"form-control\"\n//                           name=\"description\"\n//                           value={newTask.description}\n//                           onChange={handleInputChange}\n//                         ></textarea>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Due Date</label>\n//                         <input\n//                           type=\"date\"\n//                           className=\"form-control\"\n//                           name=\"due_date\"\n//                           value={newTask.due_date}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Assign To</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"assignedTo\"\n//                           multiple\n//                           value={newTask.assignedTo}\n//                           onChange={handleAssignedToChange}\n//                         >\n//                           {teamMembers.map((member) => (\n//                             <option key={member.user_id} value={member.user_id}>\n//                               {member.name}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Status</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"status\"\n//                           value={newTask.status}\n//                           onChange={handleInputChange}\n//                         >\n//                           <option value=\"Ongoing\">Ongoing</option>\n//                           <option value=\"Completed\">Completed</option>\n//                         </select>\n//                       </div>\n//                       <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleAddTask(project._id)}>\n//                         Add Task\n//                       </button>\n//                     </form>\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No projects found where you are a team member.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TasksPage;\n\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For navigation\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport './TasksPage.css'; // Custom styles\nimport { useAuth } from \"../AuthContext\";\n\nconst TasksPage = () => {\n  const navigate = useNavigate(); // To navigate programmatically\n  const [projects, setProjects] = useState([]); // State for projects where user is a team member\n  const { user } = useAuth(); // Auth context to get the current user\n  const [showTaskForm, setShowTaskForm] = useState({}); // Control task form visibility for each project\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] });\n  const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n  // Fetch projects and tasks when the component mounts\n  useEffect(() => {\n    const fetchProjectsAndTasks = async () => {\n      try {\n        if (!user) {\n          console.log(\"User is not logged in.\");\n          return; // Exit if user is not logged in\n        }\n        console.log(user);\n        const token = localStorage.getItem('token'); // Fetch token from storage\n        const response = await axios.get(`http://localhost:5000/api/user/${user.id}`, {\n          headers: {\n            Authorization: `Bearer ${token}` // Pass token in the Authorization header\n          }\n        });\n        const fetchedProjects = response.data.user.projects;\n        const fetchedTasks = response.data.user.tasks;\n        setProjects(fetchedProjects); \n        setTasks(fetchedTasks);\n        console.log(fetchedTasks);\n        // Set the projects state\n        console.log(fetchedProjects);\n      } catch (error) {\n        console.error(\"Error fetching projects or tasks:\", error);\n      }\n    };\n\n    fetchProjectsAndTasks();\n  }, [user,t]);\n\n  // Handle adding a new task\n  const handleAddTask = async (projectId) => {\n    try {\n      console.log(\"Creating task with data:\", newTask); \n      const response = await axios.post(`http://localhost:5000/api/task/${projectId}`, newTask);\n      setProjects((prevProjects) => prevProjects.map((project) =>\n        project._id === projectId ? { ...project, tasks: [...project.tasks, response.data] } : project\n      ));\n      setShowTaskForm((prev) => ({ ...prev, [projectId]: false })); // Hide the task form after adding the task\n      setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] }); // Reset the task form\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Function to remove a task\n  const handleRemoveTask = async (taskId, projectId) => {\n    try {\n      await axios.delete(`http://localhost:5000/api/task/${projectId}/${taskId}`);\n      setProjects((prevProjects) =>\n        prevProjects.map((project) =>\n          project._id === projectId\n            ? { ...project, tasks: project.tasks.filter((task) => task._id !== taskId) }\n            : project\n        )\n      );\n    } catch (error) {\n      console.error(\"Error removing task:\", error);\n    }\n  };\n\n  // Function to approve a task\n  const handleApproveTask = async (taskId, projectId) => {\n    try {\n      await axios.patch(`http://localhost:5000/api/task/${taskId}`,{status:'Approved'});\n      setProjects((prevProjects) =>\n        prevProjects.map((project) =>\n          project._id === projectId\n            ? {\n                ...project,\n                tasks: project.tasks.map((task) =>\n                  task._id === taskId ? { ...task, status: 'Approved' } : task\n                )\n              }\n            : project\n        )\n      );\n    } catch (error) {\n      console.error(\"Error approving task:\", error);\n    }\n  };\n\n  // Fetch team members for a project\n  const fetchTeamMembers = async (projectId) => {\n    try {\n      const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n      setTeamMembers(response.data.teamMembers); // Set the list of team members\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n    }\n  };\n\n  // Handle the form input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewTask({ ...newTask, [name]: value });\n  };\n\n  const handleAssignedToChange = (e) => {\n    // Convert the selected options into an array of values\n    const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n\n    // Update the newTask state with the selected assignedTo values\n    setNewTask(prevTask => ({\n      ...prevTask,\n      assignedTo: selectedOptions  // Set the array of selected user IDs\n    }));\n  };\n\n  return (\n    <div className=\"container tasks-page mt-4\">\n      {projects.length > 0 ? (\n        projects.map((project) => (\n          <div key={project._id} className=\"card project-detail-card mb-4\">\n            <div className=\"card-header d-flex justify-content-between align-items-center\">\n              <h2 className=\"mb-0\">{project.name}\n                <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n                  {project.status}\n                </span>\n              </h2>\n              {project.created_by === user.id && (\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => {\n                    setShowTaskForm((prev) => ({ ...prev, [project._id]: true }));\n                    fetchTeamMembers(project._id); // Fetch team members when opening task form\n                  }}\n                >\n                  Add Task\n                </button>\n              )}\n            </div>\n\n            {/* List of Tasks for the current project */}\n            <div className=\"card-body\">\n              <div className=\"row\">\n                {tasks && tasks.filter((task) => task.project_id === project._id).length > 0 ? (\n                  tasks.filter((task) => task.project_id === project._id).map((task) => (\n                    <div key={task._id} className=\"col-12 mb-3\">\n                      <div className=\"card h-100 task-card\">\n                        <div className=\"card-body\">\n                          <h5 className=\"card-title\">{task.name}</h5>\n                          <p className=\"card-text\">Description: {task.description}</p>\n                          <p className=\"card-text\">\n                            <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n                              {task.status}\n                            </span>\n                          </p>\n                          <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n                          <div className=\"d-flex justify-content-between\">\n                            <button\n                              className=\"btn btn-outline-primary\"\n                              onClick={() => navigate(`/task-details/${task._id}`)}\n                            >\n                              Manage\n                            </button>\n                            <button\n                              className=\"btn btn-danger btn-sm\"\n                              onClick={() => handleRemoveTask(task._id, project._id)}\n                            >\n                              Remove\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p>No tasks found for this project.</p>\n                )}\n              </div>\n\n              {/* Approve Tasks Section for Project Managers */}\n              {project.created_by === user.id && (\n                <div className=\"mt-4\">\n                  <h5>Approve Completed Tasks</h5>\n                  <div className=\"row\">\n                    {tasks.filter((task) =>  task.project_id===project._id &&task.status === 'Completed').length > 0 ? (\n                      tasks.filter((task) =>   task.project_id===project._id && task.status === 'Completed').map((task) => (\n                        <div key={task._id} className=\"col-12 mb-3\">\n                          <div className=\"card h-100 task-card\">\n                            <div className=\"card-body\">\n                              <h5 className=\"card-title\">{task.name}</h5>\n                              <p className=\"card-text\">Description: {task.description}</p>\n                              <p className=\"card-text\">\n                                <span className=\"badge bg-success\">Completed</span>\n                              </p>\n                              <div className=\"d-flex justify-content-between\">\n                                <button\n                                  className=\"btn btn-success btn-sm\"\n                                  onClick={() => handleApproveTask(task._id, project._id)}\n                                >\n                                  Approve\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p>No completed tasks to approve.</p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Task Form for Adding a New Task */}\n            {showTaskForm[project._id] && (\n              <div className=\"card mt-4\">\n                <div className=\"card-body\">\n                  <h5>Add New Task</h5>\n                  <form onSubmit={(e) => {\n                    e.preventDefault();\n                    handleAddTask(project._id);\n                  }}>\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"name\" className=\"form-label\">Task Name</label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        id=\"name\"\n                        name=\"name\"\n                        value={newTask.name}\n                        onChange={handleInputChange}\n                        required\n                      />\n                    </div>\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"description\" className=\"form-label\">Description</label>\n                      <textarea\n                        className=\"form-control\"\n                        id=\"description\"\n                        name=\"description\"\n                        value={newTask.description}\n                        onChange={handleInputChange}\n                        required\n                      />\n                    </div>\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"due_date\" className=\"form-label\">Due Date</label>\n                      <input\n                        type=\"date\"\n                        className=\"form-control\"\n                        id=\"due_date\"\n                        name=\"due_date\"\n                        value={newTask.due_date}\n                        onChange={handleInputChange}\n                        required\n                      />\n                    </div>\n                    <div className=\"mb-3\">\n                      <label htmlFor=\"assignedTo\" className=\"form-label\">Assign To</label>\n                      <select\n                        className=\"form-select\"\n                        id=\"assignedTo\"\n                        name=\"assignedTo\"\n                        multiple\n                        value={newTask.assignedTo}\n                        onChange={handleAssignedToChange}\n                        required\n                      >\n                        {teamMembers.map(member => (\n                          <option key={member._id} value={member.user_id}>\n                            {member.name}\n                          </option>\n                        ))}\n                      </select>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Add Task</button>\n                    <button className=\"btn btn-secondary ms-2\" onClick={() => setShowTaskForm((prev) => ({ ...prev, [project._id]: false }))}>Cancel</button>\n                  </form>\n                </div>\n              </div>\n            )}\n          </div>\n        ))\n      ) : (\n        <p>No projects available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default TasksPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}