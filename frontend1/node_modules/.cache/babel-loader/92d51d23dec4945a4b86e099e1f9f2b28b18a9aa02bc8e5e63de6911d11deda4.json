{"ast":null,"code":"var _jsxFileName = \"F:\\\\Project-Management-App\\\\frontend\\\\src\\\\components\\\\TasksPage.js\",\n  _s = $RefreshSig$();\n// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom'; // For extracting projectId and navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => { // Accept userId as a prop\n//   // Extract projectId from URL\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [showTaskForm, setShowTaskForm] = useState(false); // State to control task form visibility\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const [projectDetails, setProjectDetails] = useState(null); // State for project details\n//   const [userTasks, setUserTasks] = useState([]); // State for tasks of the current project\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '' });\n//   const { user } = useAuth();\n//   // const navigate = useNavigate();\n\n//   const userId=user.id;\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n\n//   // Fetching the projects data\n//   const fetchProjectsAndTasks = async () => {\n//     try {\n//       if (!user) {\n//         console.log(\"User is not logged in.\");\n//         return; // Exit if user is not logged in\n//       }\n//       console.log(user);\n//       const response = await axios.get(`http://localhost:5000/api/user/${user.id}/projects`);\n//       const projects = response.data; // Access the actual project data\n//       console.log(projects);\n//       const tasks=response.data.tasks;\n\n//       // const tasksResponse = await axios.get(`http://localhost:5000/api/user/${user.id}/tasks`);\n//         // console.log(tasksResponse.data);\n//         // setUserTasks(tasksResponse.data);\n\n//        // Fetch tasks for the specific project\n\n//         // If a projectId is provided in the URL, fetch its details and tasks\n\n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [ userId]); // Added userId to dependency array\n\n//   //Handle form submission to add a new task\n\n//   const handleAddTask = async () => {\n//     // try {\n//     //   // const response = await axios.post(`/api/tasks`, { ...newTask, project_id: projectId, user_id: userId }); // Include user_id when adding a task\n//     //   setProjectTasks([...projectTasks, response.data]); // Add the new task to the current project's tasks\n//     //   setShowTaskForm(false); // Hide form after submission\n//     //   setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '' }); // Reset new task state\n//     // } catch (error) {\n//     //   console.error(\"Error adding task:\", error);\n//     // }\n//   };\n\n//   // Handle removing a task with confirmation\n//   const handleRemoveTask = async (taskId) => {\n//     // const isConfirmed = window.confirm(\"Are you sure you want to remove this task?\");\n//     // if (isConfirmed) {\n//     //   try {\n//     //     await axios.delete(`/api/tasks/${taskId}`); // Send request to delete task\n//     //     setProjectTasks(projectTasks.filter(task => task._id !== taskId)); // Filter out the removed task\n//     //   } catch (error) {\n//     //     console.error(\"Error removing task:\", error);\n//     //   }\n//     // }\n//   };\n\n//   // Render only projects where the user is a team member\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {/* {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               <button\n//                 className=\"btn btn-primary\"\n//                 onClick={() => {\n//                   setShowTaskForm(true);\n//                   setProjectDetails(project); // Set the current project details\n//                   setUserTasks([]); // Clear previous tasks\n//                 }} // Show form for the selected project\n//               >\n//                 Add Task\n//               </button>\n//             </div> */}\n\n//             {/* Task Form */}\n//             {showTaskForm && (\n//               <div className=\"backdrop\">\n//                 <div className=\"task-form p-4 bg-white rounded shadow\">\n//                   <h3>Add New Task</h3>\n//                   <div className=\"mb-3\">\n//                     <label>Task Name:</label>\n//                     <input\n//                       type=\"text\"\n//                       className=\"form-control\"\n//                       value={newTask.name}\n//                       onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Description:</label>\n//                     <textarea\n//                       className=\"form-control\"\n//                       value={newTask.description}\n//                       onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Due Date:</label>\n//                     <input\n//                       type=\"date\"\n//                       className=\"form-control\"\n//                       value={newTask.due_date}\n//                       onChange={(e) => setNewTask({ ...newTask, due_date: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Status:</label>\n//                     <select\n//                       className=\"form-select\"\n//                       value={newTask.status}\n//                       onChange={(e) => setNewTask({ ...newTask, status: e.target.value })}\n//                     >\n//                       <option value=\"Ongoing\">Ongoing</option>\n//                       <option value=\"Completed\">Completed</option>\n//                     </select>\n//                   </div>\n//                   <div className=\"d-flex justify-content-end\">\n//                     <button className=\"btn btn-success me-2\" onClick={handleAddTask}>Add</button>\n//                     <button className=\"btn btn-secondary\" onClick={() => setShowTaskForm(false)}>Cancel</button>\n//                   </div>\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* List of Tasks */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//                 {userTasks.map((task) => (\n//                   <div key={task._id} className=\"col-12 mb-3\"> {/* Adjust to col-12 for full row */}\n//                     <div className=\"card h-100 task-card\"> {/* Add mb-3 for spacing between tasks */}\n//                       <div className=\"card-body\">\n//                         <h5 className=\"card-title\">{task.name}</h5>\n//                         <p className=\"card-text\">Description: {task.description}</p>\n//                         {/* <p className=\"card-text\">Project : {task.project.title}</p> */}\n//                         <p className=\"card-text\">\n//                           <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                             {task.status}\n//                           </span>\n//                         </p>\n//                         <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                         <div className=\"d-flex justify-content-between\">\n//                           <button\n//                             className=\"btn btn-outline-primary\"\n//                             onClick={() => navigate(`/task-details/${task._id}`)}\n//                           >\n//                             Manage\n//                           </button>\n//                           <button\n//                             className=\"btn btn-danger btn-sm\"\n//                             onClick={() => handleRemoveTask(task._id)}\n//                           >\n//                             Remove\n//                           </button>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           </div>\n//         )\n//       //  : (\n//       //   <p>No tasks found for the current user.</p>\n//       // )}\n\n//       // <button onClick={() => navigate(-1)} className=\"btn btn-outline-secondary mt-4\">Back to Projects</button>\n//     // </div>\n// }\n\n//   // );\n// // };\n\n// export default TasksPage;\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For navigation\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport './TasksPage.css'; // Custom styles\nimport { useAuth } from \"../AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TasksPage = () => {\n  _s();\n  const navigate = useNavigate(); // To navigate programmatically\n  const [projects, setProjects] = useState([]); // State for projects where user is a team member\n  const {\n    user\n  } = useAuth(); // Auth context to get the current user\n  const [showTaskForm, setShowTaskForm] = useState(false); // Control task form visibility\n  const [newTask, setNewTask] = useState({\n    name: '',\n    description: '',\n    status: 'Ongoing',\n    due_date: '',\n    assignedTo: []\n  });\n  const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n  // Fetch projects and tasks when the component mounts\n  useEffect(() => {\n    const fetchProjectsAndTasks = async () => {\n      try {\n        if (!user) {\n          console.log(\"User is not logged in.\");\n          return; // Exit if user is not logged in\n        }\n\n        // Fetch projects of the user\n        const response = await axios.get(`http://localhost:5000/api/user/${user.id}/projects`);\n        const fetchedProjects = response.data; // Access the actual project data\n        setProjects(fetchedProjects); // Set the projects state\n      } catch (error) {\n        console.error(\"Error fetching projects or tasks:\", error);\n      }\n    };\n    fetchProjectsAndTasks();\n  }, [user]);\n\n  // Handle adding a new task\n  const handleAddTask = async projectId => {\n    try {\n      const response = await axios.post(`/api/projects/${projectId}/tasks`, newTask);\n      // After adding the task, refresh the project list to include the new task\n      setProjects(prevProjects => prevProjects.map(project => project._id === projectId ? {\n        ...project,\n        tasks: [...project.tasks, response.data]\n      } : project));\n      setShowTaskForm(false); // Hide the task form after adding the task\n      setNewTask({\n        name: '',\n        description: '',\n        status: 'Ongoing',\n        due_date: '',\n        assignedTo: []\n      }); // Reset the task form\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Fetch team members for a project\n  const fetchTeamMembers = async projectId => {\n    try {\n      const response = await axios.get(`/api/projects/${projectId}/team-members`);\n      setTeamMembers(response.data); // Set the list of team members\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n    }\n  };\n\n  // Handle the form input changes\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewTask({\n      ...newTask,\n      [name]: value\n    });\n  };\n  const handleAssignedToChange = e => {\n    const selectedOptions = Array.from(e.target.selectedOptions).map(option => option.value);\n    setNewTask({\n      ...newTask,\n      assignedTo: selectedOptions\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container tasks-page mt-4\",\n    children: [projects.length > 0 ? projects.map(project => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card project-detail-card mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"mb-0\",\n          children: [project.name, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`,\n            children: project.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }, this), project.manager === user.id && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setShowTaskForm(true);\n            fetchTeamMembers(project._id); // Fetch team members when opening task form\n          },\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: project.tasks && project.tasks.length > 0 ? project.tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-12 mb-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card h-100 task-card\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"card-title\",\n                  children: task.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: [\"Description: \", task.description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`,\n                    children: task.status\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 29\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: [\"Due Date: \", new Date(task.due_date).toLocaleDateString()]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"card-text\",\n                  children: [\"Project: \", project.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 27\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-flex justify-content-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-outline-primary\",\n                    onClick: () => navigate(`/task-details/${task._id}`),\n                    children: \"Manage\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-danger btn-sm\",\n                    onClick: () => handleRemoveTask(task._id),\n                    children: \"Remove\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 23\n            }, this)\n          }, task._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No tasks found for this project.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 13\n      }, this)]\n    }, project._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No projects found for the current user.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 9\n    }, this), showTaskForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card task-form-card mt-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"Add New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Task Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              name: \"name\",\n              value: newTask.name,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              className: \"form-control\",\n              name: \"description\",\n              value: newTask.description,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-select\",\n              name: \"status\",\n              value: newTask.status,\n              onChange: handleInputChange,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Ongoing\",\n                children: \"Ongoing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 384,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"Completed\",\n                children: \"Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Due Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              className: \"form-control\",\n              name: \"due_date\",\n              value: newTask.due_date,\n              onChange: handleInputChange,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Assigned To\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              multiple: true,\n              className: \"form-select\",\n              name: \"assignedTo\",\n              value: newTask.assignedTo,\n              onChange: handleAssignedToChange,\n              required: true,\n              children: teamMembers.map(member => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: member.id,\n                children: member.name\n              }, member.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-success\",\n            onClick: () => handleAddTask(projects[0]._id) // Replace with the correct project ID\n            ,\n            children: \"Add Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-secondary ms-2\",\n            onClick: () => setShowTaskForm(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigate(-1),\n      className: \"btn btn-outline-secondary mt-4\",\n      children: \"Back to Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n};\n_s(TasksPage, \"0VqssIATBL//sXYLQng/Pt1vLGA=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = TasksPage;\nexport default TasksPage;\nvar _c;\n$RefreshReg$(_c, \"TasksPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","axios","useAuth","jsxDEV","_jsxDEV","TasksPage","_s","navigate","projects","setProjects","user","showTaskForm","setShowTaskForm","newTask","setNewTask","name","description","status","due_date","assignedTo","teamMembers","setTeamMembers","fetchProjectsAndTasks","console","log","response","get","id","fetchedProjects","data","error","handleAddTask","projectId","post","prevProjects","map","project","_id","tasks","fetchTeamMembers","handleInputChange","e","value","target","handleAssignedToChange","selectedOptions","Array","from","option","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","manager","onClick","task","Date","toLocaleDateString","handleRemoveTask","type","onChange","required","multiple","member","_c","$RefreshReg$"],"sources":["F:/Project-Management-App/frontend/src/components/TasksPage.js"],"sourcesContent":["// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom'; // For extracting projectId and navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => { // Accept userId as a prop\n//   // Extract projectId from URL\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [showTaskForm, setShowTaskForm] = useState(false); // State to control task form visibility\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const [projectDetails, setProjectDetails] = useState(null); // State for project details\n//   const [userTasks, setUserTasks] = useState([]); // State for tasks of the current project\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '' });\n//   const { user } = useAuth();\n//   // const navigate = useNavigate();\n\n//   const userId=user.id;\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n    \n\n//   // Fetching the projects data\n//   const fetchProjectsAndTasks = async () => {\n//     try {\n//       if (!user) {\n//         console.log(\"User is not logged in.\");\n//         return; // Exit if user is not logged in\n//       }\n//       console.log(user);\n//       const response = await axios.get(`http://localhost:5000/api/user/${user.id}/projects`);\n//       const projects = response.data; // Access the actual project data\n//       console.log(projects);\n//       const tasks=response.data.tasks;\n      \n      \n//       // const tasksResponse = await axios.get(`http://localhost:5000/api/user/${user.id}/tasks`);\n//         // console.log(tasksResponse.data);\n//         // setUserTasks(tasksResponse.data);\n     \n//        // Fetch tasks for the specific project\n     \n        \n//         // If a projectId is provided in the URL, fetch its details and tasks\n        \n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [ userId]); // Added userId to dependency array\n\n//   //Handle form submission to add a new task\n  \n//   const handleAddTask = async () => {\n//     // try {\n//     //   // const response = await axios.post(`/api/tasks`, { ...newTask, project_id: projectId, user_id: userId }); // Include user_id when adding a task\n//     //   setProjectTasks([...projectTasks, response.data]); // Add the new task to the current project's tasks\n//     //   setShowTaskForm(false); // Hide form after submission\n//     //   setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '' }); // Reset new task state\n//     // } catch (error) {\n//     //   console.error(\"Error adding task:\", error);\n//     // }\n//   };\n\n\n//   // Handle removing a task with confirmation\n//   const handleRemoveTask = async (taskId) => {\n//     // const isConfirmed = window.confirm(\"Are you sure you want to remove this task?\");\n//     // if (isConfirmed) {\n//     //   try {\n//     //     await axios.delete(`/api/tasks/${taskId}`); // Send request to delete task\n//     //     setProjectTasks(projectTasks.filter(task => task._id !== taskId)); // Filter out the removed task\n//     //   } catch (error) {\n//     //     console.error(\"Error removing task:\", error);\n//     //   }\n//     // }\n//   };\n\n//   // Render only projects where the user is a team member\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {/* {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               <button\n//                 className=\"btn btn-primary\"\n//                 onClick={() => {\n//                   setShowTaskForm(true);\n//                   setProjectDetails(project); // Set the current project details\n//                   setUserTasks([]); // Clear previous tasks\n//                 }} // Show form for the selected project\n//               >\n//                 Add Task\n//               </button>\n//             </div> */}\n\n//             {/* Task Form */}\n//             {showTaskForm && (\n//               <div className=\"backdrop\">\n//                 <div className=\"task-form p-4 bg-white rounded shadow\">\n//                   <h3>Add New Task</h3>\n//                   <div className=\"mb-3\">\n//                     <label>Task Name:</label>\n//                     <input\n//                       type=\"text\"\n//                       className=\"form-control\"\n//                       value={newTask.name}\n//                       onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Description:</label>\n//                     <textarea\n//                       className=\"form-control\"\n//                       value={newTask.description}\n//                       onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Due Date:</label>\n//                     <input\n//                       type=\"date\"\n//                       className=\"form-control\"\n//                       value={newTask.due_date}\n//                       onChange={(e) => setNewTask({ ...newTask, due_date: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Status:</label>\n//                     <select\n//                       className=\"form-select\"\n//                       value={newTask.status}\n//                       onChange={(e) => setNewTask({ ...newTask, status: e.target.value })}\n//                     >\n//                       <option value=\"Ongoing\">Ongoing</option>\n//                       <option value=\"Completed\">Completed</option>\n//                     </select>\n//                   </div>\n//                   <div className=\"d-flex justify-content-end\">\n//                     <button className=\"btn btn-success me-2\" onClick={handleAddTask}>Add</button>\n//                     <button className=\"btn btn-secondary\" onClick={() => setShowTaskForm(false)}>Cancel</button>\n//                   </div>\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* List of Tasks */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//                 {userTasks.map((task) => (\n//                   <div key={task._id} className=\"col-12 mb-3\"> {/* Adjust to col-12 for full row */}\n//                     <div className=\"card h-100 task-card\"> {/* Add mb-3 for spacing between tasks */}\n//                       <div className=\"card-body\">\n//                         <h5 className=\"card-title\">{task.name}</h5>\n//                         <p className=\"card-text\">Description: {task.description}</p>\n//                         {/* <p className=\"card-text\">Project : {task.project.title}</p> */}\n//                         <p className=\"card-text\">\n//                           <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                             {task.status}\n//                           </span>\n//                         </p>\n//                         <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                         <div className=\"d-flex justify-content-between\">\n//                           <button\n//                             className=\"btn btn-outline-primary\"\n//                             onClick={() => navigate(`/task-details/${task._id}`)}\n//                           >\n//                             Manage\n//                           </button>\n//                           <button\n//                             className=\"btn btn-danger btn-sm\"\n//                             onClick={() => handleRemoveTask(task._id)}\n//                           >\n//                             Remove\n//                           </button>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           </div>\n//         )\n//       //  : (\n//       //   <p>No tasks found for the current user.</p>\n//       // )}\n\n//       // <button onClick={() => navigate(-1)} className=\"btn btn-outline-secondary mt-4\">Back to Projects</button>\n//     // </div>\n// }\n\n//   // );\n// // };\n\n// export default TasksPage;\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // For navigation\nimport axios from 'axios'; // Import axios for making HTTP requests\nimport './TasksPage.css'; // Custom styles\nimport { useAuth } from \"../AuthContext\";\n\nconst TasksPage = () => {\n  const navigate = useNavigate(); // To navigate programmatically\n  const [projects, setProjects] = useState([]); // State for projects where user is a team member\n  const { user } = useAuth(); // Auth context to get the current user\n  const [showTaskForm, setShowTaskForm] = useState(false); // Control task form visibility\n  const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] });\n  const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n  \n  // Fetch projects and tasks when the component mounts\n  useEffect(() => {\n    const fetchProjectsAndTasks = async () => {\n      try {\n        if (!user) {\n          console.log(\"User is not logged in.\");\n          return; // Exit if user is not logged in\n        }\n\n        // Fetch projects of the user\n        const response = await axios.get(`http://localhost:5000/api/user/${user.id}/projects`);\n        const fetchedProjects = response.data; // Access the actual project data\n        setProjects(fetchedProjects); // Set the projects state\n      } catch (error) {\n        console.error(\"Error fetching projects or tasks:\", error);\n      }\n    };\n\n    fetchProjectsAndTasks();\n  }, [user]);\n\n  // Handle adding a new task\n  const handleAddTask = async (projectId) => {\n    try {\n      const response = await axios.post(`/api/projects/${projectId}/tasks`, newTask);\n      // After adding the task, refresh the project list to include the new task\n      setProjects((prevProjects) => prevProjects.map((project) => \n        project._id === projectId ? { ...project, tasks: [...project.tasks, response.data] } : project\n      ));\n      setShowTaskForm(false); // Hide the task form after adding the task\n      setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] }); // Reset the task form\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Fetch team members for a project\n  const fetchTeamMembers = async (projectId) => {\n    try {\n      const response = await axios.get(`/api/projects/${projectId}/team-members`);\n      setTeamMembers(response.data); // Set the list of team members\n    } catch (error) {\n      console.error(\"Error fetching team members:\", error);\n    }\n  };\n\n  // Handle the form input changes\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setNewTask({ ...newTask, [name]: value });\n  };\n\n  const handleAssignedToChange = (e) => {\n    const selectedOptions = Array.from(e.target.selectedOptions).map((option) => option.value);\n    setNewTask({ ...newTask, assignedTo: selectedOptions });\n  };\n\n  return (\n    <div className=\"container tasks-page mt-4\">\n      {projects.length > 0 ? (\n        projects.map((project) => (\n          <div key={project._id} className=\"card project-detail-card mb-4\">\n            <div className=\"card-header d-flex justify-content-between align-items-center\">\n              <h2 className=\"mb-0\">{project.name}\n                <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n                  {project.status}\n                </span>\n              </h2>\n              {project.manager === user.id && (\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => {\n                    setShowTaskForm(true);\n                    fetchTeamMembers(project._id); // Fetch team members when opening task form\n                  }}\n                >\n                  Add Task\n                </button>\n              )}\n            </div>\n\n            {/* List of Tasks for the current project */}\n            <div className=\"card-body\">\n              <div className=\"row\">\n                {project.tasks && project.tasks.length > 0 ? (\n                  project.tasks.map((task) => (\n                    <div key={task._id} className=\"col-12 mb-3\">\n                      <div className=\"card h-100 task-card\">\n                        <div className=\"card-body\">\n                          <h5 className=\"card-title\">{task.name}</h5>\n                          <p className=\"card-text\">Description: {task.description}</p>\n                          <p className=\"card-text\">\n                            <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n                              {task.status}\n                            </span>\n                          </p>\n                          <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n                          <p className=\"card-text\">Project: {project.name}</p> {/* Display project name */}\n                          <div className=\"d-flex justify-content-between\">\n                            <button\n                              className=\"btn btn-outline-primary\"\n                              onClick={() => navigate(`/task-details/${task._id}`)}\n                            >\n                              Manage\n                            </button>\n                            <button\n                              className=\"btn btn-danger btn-sm\"\n                              onClick={() => handleRemoveTask(task._id)}\n                            >\n                              Remove\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p>No tasks found for this project.</p>\n                )}\n              </div>\n            </div>\n          </div>\n        ))\n      ) : (\n        <p>No projects found for the current user.</p>\n      )}\n\n      {/* Add Task Form */}\n      {showTaskForm && (\n        <div className=\"card task-form-card mt-4\">\n          <div className=\"card-body\">\n            <h5>Add New Task</h5>\n            <form>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Task Name</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"name\"\n                  value={newTask.name}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Description</label>\n                <textarea\n                  className=\"form-control\"\n                  name=\"description\"\n                  value={newTask.description}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Status</label>\n                <select\n                  className=\"form-select\"\n                  name=\"status\"\n                  value={newTask.status}\n                  onChange={handleInputChange}\n                  required\n                >\n                  <option value=\"Ongoing\">Ongoing</option>\n                  <option value=\"Completed\">Completed</option>\n                </select>\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Due Date</label>\n                <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  name=\"due_date\"\n                  value={newTask.due_date}\n                  onChange={handleInputChange}\n                  required\n                />\n              </div>\n              <div className=\"mb-3\">\n                <label className=\"form-label\">Assigned To</label>\n                <select\n                  multiple\n                  className=\"form-select\"\n                  name=\"assignedTo\"\n                  value={newTask.assignedTo}\n                  onChange={handleAssignedToChange}\n                  required\n                >\n                  {teamMembers.map((member) => (\n                    <option key={member.id} value={member.id}>\n                      {member.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => handleAddTask(projects[0]._id)} // Replace with the correct project ID\n              >\n                Add Task\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary ms-2\"\n                onClick={() => setShowTaskForm(false)}\n              >\n                Cancel\n              </button>\n            </form>\n          </div>\n        </div>\n      )}\n\n      <button onClick={() => navigate(-1)} className=\"btn btn-outline-secondary mt-4\">\n        Back to Projects\n      </button>\n    </div>\n  );\n};\n\nexport default TasksPage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO,sCAAsC,CAAC,CAAC;AAC/C,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,OAAO,iBAAiB,CAAC,CAAC;AAC1B,SAASC,OAAO,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,SAAS,GAAGA,CA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}