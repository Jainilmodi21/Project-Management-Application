{"ast":null,"code":"// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // For navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => {\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const { user } = useAuth(); // Auth context to get the current user\n//   const [showTaskForm, setShowTaskForm] = useState({}); // Control task form visibility for each project\n//   const [tasks,setTasks]=useState([]);\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] });\n//   const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n//     const fetchProjectsAndTasks = async () => {\n//       try {\n//         if (!user) {\n//           console.log(\"User is not logged in.\");\n//           return; // Exit if user is not logged in\n//         }\n//         console.log(user);\n//         const token = localStorage.getItem('token'); // Fetch token from storage\n//     const response = await axios.get(`http://localhost:5000/api/user/${user.id}`, {\n//       headers: {\n//         Authorization: `Bearer ${token}` // Pass token in the Authorization header\n//       }\n//     });\n//         const fetchedProjects = response.data.user.projects;\n//         const fetchedTasks=response.data.user.tasks;\n//         setProjects(fetchedProjects); \n//         setTasks(fetchedTasks);\n//         console.log(fetchedTasks);\n//         // Set the projects state\n//         console.log(fetchedProjects);\n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [user]);\n\n//   // Handle adding a new task\n//   const handleAddTask = async (projectId) => {\n//     try {\n//       console.log(\"Creating task with data:\", newTask); \n//       const response = await axios.post(`http://localhost:5000/api/task/${projectId}`, newTask);\n//       setProjects((prevProjects) => prevProjects.map((project) =>\n//         project._id === projectId ? { ...project, tasks: [...project.tasks, response.data] } : project\n//       ));\n//       setShowTaskForm((prev) => ({ ...prev, [projectId]: false })); // Hide the task form after adding the task\n//       setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] }); // Reset the task form\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//     }\n//   };\n\n//   // Function to remove a task\n//   const handleRemoveTask = async (taskId, projectId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/task/${projectId}/${taskId}`);\n//       setProjects((prevProjects) =>\n//         prevProjects.map((project) =>\n//           project._id === projectId\n//             ? { ...project, tasks: project.tasks.filter((task) => task._id !== taskId) }\n//             : project\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error removing task:\", error);\n//     }\n//   };\n\n//   // Fetch team members for a project\n//   const fetchTeamMembers = async (projectId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n//       setTeamMembers(response.data.teamMembers); // Set the list of team members\n//     } catch (error) {\n//       console.error(\"Error fetching team members:\", error);\n//     }\n//   };\n\n//   // Handle the form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewTask({ ...newTask, [name]: value });\n//   };\n\n//   const handleAssignedToChange = (e) => {\n//     // Convert the selected options into an array of values\n//     const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n\n//     // Update the newTask state with the selected assignedTo values\n//     setNewTask(prevTask => ({\n//         ...prevTask,\n//         assignedTo: selectedOptions  // Set the array of selected user IDs\n//     }));\n//   };\n\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               {project.created_by === user.id && (\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   onClick={() => {\n//                     setShowTaskForm((prev) => ({ ...prev, [project._id]: true }));\n//                     fetchTeamMembers(project._id); // Fetch team members when opening task form\n//                   }}\n//                 >\n//                   Add Task\n//                 </button>\n//               )}\n//             </div>\n\n//             {/* List of Tasks for the current project */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//               {tasks && tasks.filter((task) => task.project_id === project._id).length > 0 ? (\n//                 tasks.filter((task) => task.project_id === project._id).map((task) => (\n//                       <div key={task._id} className=\"col-12 mb-3\">\n//                         <div className=\"card h-100 task-card\">\n//                           <div className=\"card-body\">\n//                             <h5 className=\"card-title\">{task.name}</h5>\n//                             <p className=\"card-text\">Description: {task.description}</p>\n//                             <p className=\"card-text\">\n//                               <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                                 {task.status}\n//                               </span>\n//                             </p>\n//                             <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                             <div className=\"d-flex justify-content-between\">\n//                               <button\n//                                 className=\"btn btn-outline-primary\"\n//                                 onClick={() => navigate(`/task-details/${task._id}`)}\n//                               >\n//                                 Manage\n//                               </button>\n//                               <button\n//                                 className=\"btn btn-danger btn-sm\"\n//                                 onClick={() => handleRemoveTask(task._id, project._id)}\n//                               >\n//                                 Remove\n//                               </button>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     ))\n//                 ) : (\n//                   <p>No tasks found for this project.</p>\n//                 )}\n//               </div>\n\n//               {/* Add Task Form specific to each project */}\n//               {showTaskForm[project._id] && (\n//                 <div className=\"card task-form-card mt-4\">\n//                   <div className=\"card-body\">\n//                     <h5>Add New Task</h5>\n//                     <form>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Task Name</label>\n//                         <input\n//                           type=\"text\"\n//                           className=\"form-control\"\n//                           name=\"name\"\n//                           value={newTask.name}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Description</label>\n//                         <textarea\n//                           className=\"form-control\"\n//                           name=\"description\"\n//                           value={newTask.description}\n//                           onChange={handleInputChange}\n//                         ></textarea>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Due Date</label>\n//                         <input\n//                           type=\"date\"\n//                           className=\"form-control\"\n//                           name=\"due_date\"\n//                           value={newTask.due_date}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Assign To</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"assignedTo\"\n//                           multiple\n//                           value={newTask.assignedTo}\n//                           onChange={handleAssignedToChange}\n//                         >\n//                           {teamMembers.map((member) => (\n//                             <option key={member.user_id} value={member.user_id}>\n//                               {member.name}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Status</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"status\"\n//                           value={newTask.status}\n//                           onChange={handleInputChange}\n//                         >\n//                           <option value=\"Ongoing\">Ongoing</option>\n//                           <option value=\"Completed\">Completed</option>\n//                         </select>\n//                       </div>\n//                       <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleAddTask(project._id)}>\n//                         Add Task\n//                       </button>\n//                     </form>\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No projects found where you are a team member.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TasksPage;","map":{"version":3,"names":[],"sources":["F:/Project-Management-App/frontend/src/components/TasksPage.js"],"sourcesContent":["// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate } from 'react-router-dom'; // For navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => {\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const { user } = useAuth(); // Auth context to get the current user\n//   const [showTaskForm, setShowTaskForm] = useState({}); // Control task form visibility for each project\n//   const [tasks,setTasks]=useState([]);\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] });\n//   const [teamMembers, setTeamMembers] = useState([]); // Store team members for the assigned field\n\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n//     const fetchProjectsAndTasks = async () => {\n//       try {\n//         if (!user) {\n//           console.log(\"User is not logged in.\");\n//           return; // Exit if user is not logged in\n//         }\n//         console.log(user);\n//         const token = localStorage.getItem('token'); // Fetch token from storage\n//     const response = await axios.get(`http://localhost:5000/api/user/${user.id}`, {\n//       headers: {\n//         Authorization: `Bearer ${token}` // Pass token in the Authorization header\n//       }\n//     });\n//         const fetchedProjects = response.data.user.projects;\n//         const fetchedTasks=response.data.user.tasks;\n//         setProjects(fetchedProjects); \n//         setTasks(fetchedTasks);\n//         console.log(fetchedTasks);\n//         // Set the projects state\n//         console.log(fetchedProjects);\n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [user]);\n\n//   // Handle adding a new task\n//   const handleAddTask = async (projectId) => {\n//     try {\n//       console.log(\"Creating task with data:\", newTask); \n//       const response = await axios.post(`http://localhost:5000/api/task/${projectId}`, newTask);\n//       setProjects((prevProjects) => prevProjects.map((project) =>\n//         project._id === projectId ? { ...project, tasks: [...project.tasks, response.data] } : project\n//       ));\n//       setShowTaskForm((prev) => ({ ...prev, [projectId]: false })); // Hide the task form after adding the task\n//       setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '', assignedTo: [] }); // Reset the task form\n//     } catch (error) {\n//       console.error(\"Error adding task:\", error);\n//     }\n//   };\n\n//   // Function to remove a task\n//   const handleRemoveTask = async (taskId, projectId) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/task/${projectId}/${taskId}`);\n//       setProjects((prevProjects) =>\n//         prevProjects.map((project) =>\n//           project._id === projectId\n//             ? { ...project, tasks: project.tasks.filter((task) => task._id !== taskId) }\n//             : project\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error removing task:\", error);\n//     }\n//   };\n\n//   // Fetch team members for a project\n//   const fetchTeamMembers = async (projectId) => {\n//     try {\n//       const response = await axios.get(`http://localhost:5000/api/project/${projectId}`);\n//       setTeamMembers(response.data.teamMembers); // Set the list of team members\n//     } catch (error) {\n//       console.error(\"Error fetching team members:\", error);\n//     }\n//   };\n\n//   // Handle the form input changes\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewTask({ ...newTask, [name]: value });\n//   };\n\n//   const handleAssignedToChange = (e) => {\n//     // Convert the selected options into an array of values\n//     const selectedOptions = Array.from(e.target.selectedOptions, option => option.value);\n\n//     // Update the newTask state with the selected assignedTo values\n//     setNewTask(prevTask => ({\n//         ...prevTask,\n//         assignedTo: selectedOptions  // Set the array of selected user IDs\n//     }));\n//   };\n\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               {project.created_by === user.id && (\n//                 <button\n//                   className=\"btn btn-primary\"\n//                   onClick={() => {\n//                     setShowTaskForm((prev) => ({ ...prev, [project._id]: true }));\n//                     fetchTeamMembers(project._id); // Fetch team members when opening task form\n//                   }}\n//                 >\n//                   Add Task\n//                 </button>\n//               )}\n//             </div>\n\n//             {/* List of Tasks for the current project */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//               {tasks && tasks.filter((task) => task.project_id === project._id).length > 0 ? (\n//                 tasks.filter((task) => task.project_id === project._id).map((task) => (\n//                       <div key={task._id} className=\"col-12 mb-3\">\n//                         <div className=\"card h-100 task-card\">\n//                           <div className=\"card-body\">\n//                             <h5 className=\"card-title\">{task.name}</h5>\n//                             <p className=\"card-text\">Description: {task.description}</p>\n//                             <p className=\"card-text\">\n//                               <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                                 {task.status}\n//                               </span>\n//                             </p>\n//                             <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                             <div className=\"d-flex justify-content-between\">\n//                               <button\n//                                 className=\"btn btn-outline-primary\"\n//                                 onClick={() => navigate(`/task-details/${task._id}`)}\n//                               >\n//                                 Manage\n//                               </button>\n//                               <button\n//                                 className=\"btn btn-danger btn-sm\"\n//                                 onClick={() => handleRemoveTask(task._id, project._id)}\n//                               >\n//                                 Remove\n//                               </button>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     ))\n//                 ) : (\n//                   <p>No tasks found for this project.</p>\n//                 )}\n//               </div>\n\n//               {/* Add Task Form specific to each project */}\n//               {showTaskForm[project._id] && (\n//                 <div className=\"card task-form-card mt-4\">\n//                   <div className=\"card-body\">\n//                     <h5>Add New Task</h5>\n//                     <form>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Task Name</label>\n//                         <input\n//                           type=\"text\"\n//                           className=\"form-control\"\n//                           name=\"name\"\n//                           value={newTask.name}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Description</label>\n//                         <textarea\n//                           className=\"form-control\"\n//                           name=\"description\"\n//                           value={newTask.description}\n//                           onChange={handleInputChange}\n//                         ></textarea>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Due Date</label>\n//                         <input\n//                           type=\"date\"\n//                           className=\"form-control\"\n//                           name=\"due_date\"\n//                           value={newTask.due_date}\n//                           onChange={handleInputChange}\n//                         />\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Assign To</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"assignedTo\"\n//                           multiple\n//                           value={newTask.assignedTo}\n//                           onChange={handleAssignedToChange}\n//                         >\n//                           {teamMembers.map((member) => (\n//                             <option key={member.user_id} value={member.user_id}>\n//                               {member.name}\n//                             </option>\n//                           ))}\n//                         </select>\n//                       </div>\n//                       <div className=\"mb-3\">\n//                         <label className=\"form-label\">Status</label>\n//                         <select\n//                           className=\"form-control\"\n//                           name=\"status\"\n//                           value={newTask.status}\n//                           onChange={handleInputChange}\n//                         >\n//                           <option value=\"Ongoing\">Ongoing</option>\n//                           <option value=\"Completed\">Completed</option>\n//                         </select>\n//                       </div>\n//                       <button type=\"button\" className=\"btn btn-primary\" onClick={() => handleAddTask(project._id)}>\n//                         Add Task\n//                       </button>\n//                     </form>\n//                   </div>\n//                 </div>\n//               )}\n//             </div>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No projects found where you are a team member.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TasksPage;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}