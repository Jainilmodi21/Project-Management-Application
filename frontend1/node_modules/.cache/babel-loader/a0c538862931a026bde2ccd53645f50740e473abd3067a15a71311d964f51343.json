{"ast":null,"code":"// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom'; // For extracting projectId and navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => { // Accept userId as a prop\n//   // Extract projectId from URL\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [showTaskForm, setShowTaskForm] = useState(false); // State to control task form visibility\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const [projectDetails, setProjectDetails] = useState(null); // State for project details\n//   const [userTasks, setUserTasks] = useState([]); // State for tasks of the current project\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '' });\n//   const { user } = useAuth();\n//   // const navigate = useNavigate();\n\n//   const userId=user.id;\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n\n//   // Fetching the projects data\n//   const fetchProjectsAndTasks = async () => {\n//     try {\n//       if (!user) {\n//         console.log(\"User is not logged in.\");\n//         return; // Exit if user is not logged in\n//       }\n//       console.log(user);\n//       const response = await axios.get(`http://localhost:5000/api/user/${user.id}/projects`);\n//       const projects = response.data; // Access the actual project data\n//       console.log(projects);\n//       const tasks=response.data.tasks;\n\n//       // const tasksResponse = await axios.get(`http://localhost:5000/api/user/${user.id}/tasks`);\n//         // console.log(tasksResponse.data);\n//         // setUserTasks(tasksResponse.data);\n\n//        // Fetch tasks for the specific project\n\n//         // If a projectId is provided in the URL, fetch its details and tasks\n\n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [ userId]); // Added userId to dependency array\n\n//   //Handle form submission to add a new task\n\n//   const handleAddTask = async () => {\n//     // try {\n//     //   // const response = await axios.post(`/api/tasks`, { ...newTask, project_id: projectId, user_id: userId }); // Include user_id when adding a task\n//     //   setProjectTasks([...projectTasks, response.data]); // Add the new task to the current project's tasks\n//     //   setShowTaskForm(false); // Hide form after submission\n//     //   setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '' }); // Reset new task state\n//     // } catch (error) {\n//     //   console.error(\"Error adding task:\", error);\n//     // }\n//   };\n\n//   // Handle removing a task with confirmation\n//   const handleRemoveTask = async (taskId) => {\n//     // const isConfirmed = window.confirm(\"Are you sure you want to remove this task?\");\n//     // if (isConfirmed) {\n//     //   try {\n//     //     await axios.delete(`/api/tasks/${taskId}`); // Send request to delete task\n//     //     setProjectTasks(projectTasks.filter(task => task._id !== taskId)); // Filter out the removed task\n//     //   } catch (error) {\n//     //     console.error(\"Error removing task:\", error);\n//     //   }\n//     // }\n//   };\n\n//   // Render only projects where the user is a team member\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {/* {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               <button\n//                 className=\"btn btn-primary\"\n//                 onClick={() => {\n//                   setShowTaskForm(true);\n//                   setProjectDetails(project); // Set the current project details\n//                   setUserTasks([]); // Clear previous tasks\n//                 }} // Show form for the selected project\n//               >\n//                 Add Task\n//               </button>\n//             </div> */}\n\n//             {/* Task Form */}\n//             {showTaskForm && (\n//               <div className=\"backdrop\">\n//                 <div className=\"task-form p-4 bg-white rounded shadow\">\n//                   <h3>Add New Task</h3>\n//                   <div className=\"mb-3\">\n//                     <label>Task Name:</label>\n//                     <input\n//                       type=\"text\"\n//                       className=\"form-control\"\n//                       value={newTask.name}\n//                       onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Description:</label>\n//                     <textarea\n//                       className=\"form-control\"\n//                       value={newTask.description}\n//                       onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Due Date:</label>\n//                     <input\n//                       type=\"date\"\n//                       className=\"form-control\"\n//                       value={newTask.due_date}\n//                       onChange={(e) => setNewTask({ ...newTask, due_date: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Status:</label>\n//                     <select\n//                       className=\"form-select\"\n//                       value={newTask.status}\n//                       onChange={(e) => setNewTask({ ...newTask, status: e.target.value })}\n//                     >\n//                       <option value=\"Ongoing\">Ongoing</option>\n//                       <option value=\"Completed\">Completed</option>\n//                     </select>\n//                   </div>\n//                   <div className=\"d-flex justify-content-end\">\n//                     <button className=\"btn btn-success me-2\" onClick={handleAddTask}>Add</button>\n//                     <button className=\"btn btn-secondary\" onClick={() => setShowTaskForm(false)}>Cancel</button>\n//                   </div>\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* List of Tasks */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//                 {userTasks.map((task) => (\n//                   <div key={task._id} className=\"col-12 mb-3\"> {/* Adjust to col-12 for full row */}\n//                     <div className=\"card h-100 task-card\"> {/* Add mb-3 for spacing between tasks */}\n//                       <div className=\"card-body\">\n//                         <h5 className=\"card-title\">{task.name}</h5>\n//                         <p className=\"card-text\">Description: {task.description}</p>\n//                         {/* <p className=\"card-text\">Project : {task.project.title}</p> */}\n//                         <p className=\"card-text\">\n//                           <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                             {task.status}\n//                           </span>\n//                         </p>\n//                         <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                         <div className=\"d-flex justify-content-between\">\n//                           <button\n//                             className=\"btn btn-outline-primary\"\n//                             onClick={() => navigate(`/task-details/${task._id}`)}\n//                           >\n//                             Manage\n//                           </button>\n//                           <button\n//                             className=\"btn btn-danger btn-sm\"\n//                             onClick={() => handleRemoveTask(task._id)}\n//                           >\n//                             Remove\n//                           </button>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           </div>\n//         )\n//       //  : (\n//       //   <p>No tasks found for the current user.</p>\n//       // )}\n\n//       // <button onClick={() => navigate(-1)} className=\"btn btn-outline-secondary mt-4\">Back to Projects</button>\n//     // </div>\n// }\n\n//   // );\n// // };\n\n// export default TasksPage;","map":{"version":3,"names":[],"sources":["F:/Project-Management-App/frontend/src/components/TasksPage.js"],"sourcesContent":["// import 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap styles\n// import React, { useEffect, useState } from 'react';\n// import { useNavigate, useParams } from 'react-router-dom'; // For extracting projectId and navigation\n// import axios from 'axios'; // Import axios for making HTTP requests\n// import './TasksPage.css'; // Custom styles\n// import { useAuth } from \"../AuthContext\";\n\n// const TasksPage = () => { // Accept userId as a prop\n//   // Extract projectId from URL\n//   const navigate = useNavigate(); // To navigate programmatically\n//   const [showTaskForm, setShowTaskForm] = useState(false); // State to control task form visibility\n//   const [projects, setProjects] = useState([]); // State for projects where user is a team member\n//   const [projectDetails, setProjectDetails] = useState(null); // State for project details\n//   const [userTasks, setUserTasks] = useState([]); // State for tasks of the current project\n//   const [newTask, setNewTask] = useState({ name: '', description: '', status: 'Ongoing', due_date: '' });\n//   const { user } = useAuth();\n//   // const navigate = useNavigate();\n\n//   const userId=user.id;\n//   // Fetch projects and tasks when the component mounts\n//   useEffect(() => {\n    \n\n//   // Fetching the projects data\n//   const fetchProjectsAndTasks = async () => {\n//     try {\n//       if (!user) {\n//         console.log(\"User is not logged in.\");\n//         return; // Exit if user is not logged in\n//       }\n//       console.log(user);\n//       const response = await axios.get(`http://localhost:5000/api/user/${user.id}/projects`);\n//       const projects = response.data; // Access the actual project data\n//       console.log(projects);\n//       const tasks=response.data.tasks;\n      \n      \n//       // const tasksResponse = await axios.get(`http://localhost:5000/api/user/${user.id}/tasks`);\n//         // console.log(tasksResponse.data);\n//         // setUserTasks(tasksResponse.data);\n     \n//        // Fetch tasks for the specific project\n     \n        \n//         // If a projectId is provided in the URL, fetch its details and tasks\n        \n//       } catch (error) {\n//         console.error(\"Error fetching projects or tasks:\", error);\n//       }\n//     };\n\n//     fetchProjectsAndTasks();\n//   }, [ userId]); // Added userId to dependency array\n\n//   //Handle form submission to add a new task\n  \n//   const handleAddTask = async () => {\n//     // try {\n//     //   // const response = await axios.post(`/api/tasks`, { ...newTask, project_id: projectId, user_id: userId }); // Include user_id when adding a task\n//     //   setProjectTasks([...projectTasks, response.data]); // Add the new task to the current project's tasks\n//     //   setShowTaskForm(false); // Hide form after submission\n//     //   setNewTask({ name: '', description: '', status: 'Ongoing', due_date: '' }); // Reset new task state\n//     // } catch (error) {\n//     //   console.error(\"Error adding task:\", error);\n//     // }\n//   };\n\n\n//   // Handle removing a task with confirmation\n//   const handleRemoveTask = async (taskId) => {\n//     // const isConfirmed = window.confirm(\"Are you sure you want to remove this task?\");\n//     // if (isConfirmed) {\n//     //   try {\n//     //     await axios.delete(`/api/tasks/${taskId}`); // Send request to delete task\n//     //     setProjectTasks(projectTasks.filter(task => task._id !== taskId)); // Filter out the removed task\n//     //   } catch (error) {\n//     //     console.error(\"Error removing task:\", error);\n//     //   }\n//     // }\n//   };\n\n//   // Render only projects where the user is a team member\n//   return (\n//     <div className=\"container tasks-page mt-4\">\n//       {/* {projects.length > 0 ? (\n//         projects.map((project) => (\n//           <div key={project._id} className=\"card project-detail-card mb-4\">\n//             <div className=\"card-header d-flex justify-content-between align-items-center\">\n//               <h2 className=\"mb-0\">{project.name}\n//                 <span className={`badge ${project.status === 'Ongoing' ? 'bg-warning' : 'bg-success'} ms-2`}>\n//                   {project.status}\n//                 </span>\n//               </h2>\n//               <button\n//                 className=\"btn btn-primary\"\n//                 onClick={() => {\n//                   setShowTaskForm(true);\n//                   setProjectDetails(project); // Set the current project details\n//                   setUserTasks([]); // Clear previous tasks\n//                 }} // Show form for the selected project\n//               >\n//                 Add Task\n//               </button>\n//             </div> */}\n\n//             {/* Task Form */}\n//             {showTaskForm && (\n//               <div className=\"backdrop\">\n//                 <div className=\"task-form p-4 bg-white rounded shadow\">\n//                   <h3>Add New Task</h3>\n//                   <div className=\"mb-3\">\n//                     <label>Task Name:</label>\n//                     <input\n//                       type=\"text\"\n//                       className=\"form-control\"\n//                       value={newTask.name}\n//                       onChange={(e) => setNewTask({ ...newTask, name: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Description:</label>\n//                     <textarea\n//                       className=\"form-control\"\n//                       value={newTask.description}\n//                       onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Due Date:</label>\n//                     <input\n//                       type=\"date\"\n//                       className=\"form-control\"\n//                       value={newTask.due_date}\n//                       onChange={(e) => setNewTask({ ...newTask, due_date: e.target.value })}\n//                     />\n//                   </div>\n//                   <div className=\"mb-3\">\n//                     <label>Status:</label>\n//                     <select\n//                       className=\"form-select\"\n//                       value={newTask.status}\n//                       onChange={(e) => setNewTask({ ...newTask, status: e.target.value })}\n//                     >\n//                       <option value=\"Ongoing\">Ongoing</option>\n//                       <option value=\"Completed\">Completed</option>\n//                     </select>\n//                   </div>\n//                   <div className=\"d-flex justify-content-end\">\n//                     <button className=\"btn btn-success me-2\" onClick={handleAddTask}>Add</button>\n//                     <button className=\"btn btn-secondary\" onClick={() => setShowTaskForm(false)}>Cancel</button>\n//                   </div>\n//                 </div>\n//               </div>\n//             )}\n\n//             {/* List of Tasks */}\n//             <div className=\"card-body\">\n//               <div className=\"row\">\n//                 {userTasks.map((task) => (\n//                   <div key={task._id} className=\"col-12 mb-3\"> {/* Adjust to col-12 for full row */}\n//                     <div className=\"card h-100 task-card\"> {/* Add mb-3 for spacing between tasks */}\n//                       <div className=\"card-body\">\n//                         <h5 className=\"card-title\">{task.name}</h5>\n//                         <p className=\"card-text\">Description: {task.description}</p>\n//                         {/* <p className=\"card-text\">Project : {task.project.title}</p> */}\n//                         <p className=\"card-text\">\n//                           <span className={`badge ${task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                             {task.status}\n//                           </span>\n//                         </p>\n//                         <p className=\"card-text\">Due Date: {new Date(task.due_date).toLocaleDateString()}</p>\n//                         <div className=\"d-flex justify-content-between\">\n//                           <button\n//                             className=\"btn btn-outline-primary\"\n//                             onClick={() => navigate(`/task-details/${task._id}`)}\n//                           >\n//                             Manage\n//                           </button>\n//                           <button\n//                             className=\"btn btn-danger btn-sm\"\n//                             onClick={() => handleRemoveTask(task._id)}\n//                           >\n//                             Remove\n//                           </button>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             </div>\n//           </div>\n//         )\n//       //  : (\n//       //   <p>No tasks found for the current user.</p>\n//       // )}\n\n//       // <button onClick={() => navigate(-1)} className=\"btn btn-outline-secondary mt-4\">Back to Projects</button>\n//     // </div>\n// }\n\n//   // );\n// // };\n\n// export default TasksPage;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}