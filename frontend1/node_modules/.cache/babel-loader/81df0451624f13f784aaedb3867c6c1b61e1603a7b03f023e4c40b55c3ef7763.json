{"ast":null,"code":"// import 'bootstrap/dist/css/bootstrap.min.css';\n// import React, { useEffect, useState } from 'react';\n// import { Button, Form, Modal } from 'react-bootstrap'; // Import modal components from react-bootstrap\n// import { useParams } from 'react-router-dom';\n// import { tasks, users } from '../DummyData'; // Import tasks and users\n// import './TaskDetails.css'; // Import custom CSS\n\n// function TaskDetails() {\n//   const { taskId } = useParams();\n//   const [task, setTask] = useState(null);\n//   const [taskMembers, setTaskMembers] = useState([]);\n//   const [showEditTaskModal, setShowEditTaskModal] = useState(false);\n//   const [showAddMembersModal, setShowAddMembersModal] = useState(false);\n//   const [showConfirmDeleteModal, setShowConfirmDeleteModal] = useState(false); // To confirm delete\n//   const [memberToRemove, setMemberToRemove] = useState(null); // Store member to remove\n//   const [editedTask, setEditedTask] = useState({ name: '', description: '', due_date: '', status: '' });\n//   const [newMemberId, setNewMemberId] = useState(''); // To store the new member selected\n\n//   useEffect(() => {\n//     const selectedTask = tasks.find((t) => t._id === taskId);\n\n//     if (selectedTask) {\n//       setTask(selectedTask);\n//       setEditedTask(selectedTask);\n\n//       const members = selectedTask.assignedTo.map((userId) => {\n//         const user = users.find((u) => u._id === userId);\n//         return user ? { ...user } : null;\n//       }).filter(Boolean);\n\n//       setTaskMembers(members);\n//     } else {\n//       setTask(null);\n//     }\n//   }, [taskId]);\n\n//   const handleTaskChange = (e) => {\n//     setEditedTask({ ...editedTask, [e.target.name]: e.target.value });\n//   };\n\n//   const handleTaskSave = () => {\n//     setTask({ ...editedTask });\n//     setShowEditTaskModal(false);\n//   };\n\n//   const handleAddMember = () => {\n//     const newMember = users.find((u) => u._id === newMemberId);\n//     if (newMember) {\n//       setTaskMembers([...taskMembers, newMember]);\n//     }\n//     setNewMemberId('');\n//   };\n\n//   const handleRemoveMember = (memberId) => {\n//     setMemberToRemove(memberId);\n//     setShowConfirmDeleteModal(true); // Show confirm modal\n//   };\n\n//   const confirmRemoveMember = () => {\n//     const updatedMembers = taskMembers.filter((m) => m._id !== memberToRemove);\n//     setTaskMembers(updatedMembers);\n//     setShowConfirmDeleteModal(false); // Close modal\n//   };\n\n//   if (!task) {\n//     return <div>Loading task details...</div>;\n//   }\n\n//   return (\n//     <div className=\"container mt-5\">\n//       <h1 className=\"text-center mb-4\" id=\"heading1\">Task Details</h1>\n\n//       {/* Task Overview Section */}\n//       <div className=\"card shadow-sm mb-4\">\n//         <div className=\"card-body d-flex justify-content-between\">\n//           <div>\n//             <h2 className=\"card-title\">{task.name}</h2>\n//             <p className=\"card-text\">{task.description}</p>\n//             <ul className=\"list-unstyled\">\n//               <li><strong>Due Date:</strong> {new Date(task.due_date).toLocaleDateString()}</li>\n//               <li>\n//                 <strong>Status:</strong>{' '}\n//                 <span className={`badge ${task.status === 'In Progress' || task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\n//                   {task.status}\n//                 </span>\n//               </li>\n//             </ul>\n//           </div>\n//           <div>\n//             <Button variant=\"primary\" onClick={() => setShowEditTaskModal(true)}>\n//               Edit Task\n//             </Button>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Task Members Section */}\n//       <div className=\"card shadow-sm\">\n//         <div className=\"card-header d-flex justify-content-between\">\n//           <h3>Assigned Members</h3>\n//           <Button variant=\"primary\" onClick={() => setShowAddMembersModal(true)}>\n//             Add Members\n//           </Button>\n//         </div>\n//         <ul className=\"list-group list-group-flush\">\n//           {taskMembers.map((member) => (\n//             <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={member._id}>\n//               <div>\n//                 {member.name} - <span className=\"text-muted\">{member.email}</span>\n//               </div>\n//               <Button variant=\"danger\" onClick={() => handleRemoveMember(member._id)}>\n//                 Remove\n//               </Button>\n//             </li>\n//           ))}\n//         </ul>\n//         {/* <div className=\"card-footer\">\n//           <Button variant=\"success\" onClick={() => setShowAddMembersModal(true)}>Add Member</Button>\n//         </div> */}\n//       </div>\n\n//       {/* Edit Task Modal */}\n//       <Modal show={showEditTaskModal} onHide={() => setShowEditTaskModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Edit Task</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Task Name</Form.Label>\n//               <Form.Control type=\"text\" name=\"name\" value={editedTask.name} onChange={handleTaskChange} />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Description</Form.Label>\n//               <Form.Control as=\"textarea\" name=\"description\" value={editedTask.description} onChange={handleTaskChange} />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Due Date</Form.Label>\n//               <Form.Control type=\"date\" name=\"due_date\" value={editedTask.due_date} onChange={handleTaskChange} />\n//             </Form.Group>\n//             <Form.Group className=\"mb-3\">\n//               <Form.Label>Status</Form.Label>\n//               <Form.Select name=\"status\" value={editedTask.status} onChange={handleTaskChange}>\n//                 <option value=\"Ongoing\">Ongoing</option>\n//                 <option value=\"Completed\">Completed</option>\n//               </Form.Select>\n//             </Form.Group>\n//           </Form>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowEditTaskModal(false)}>\n//             Close\n//           </Button>\n//           <Button variant=\"primary\" onClick={handleTaskSave}>\n//             Save Changes\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Confirm Delete Member Modal */}\n//       <Modal show={showConfirmDeleteModal} onHide={() => setShowConfirmDeleteModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Confirm Remove Member</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           Are you sure you want to remove this member from the task?\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowConfirmDeleteModal(false)}>\n//             Cancel\n//           </Button>\n//           <Button variant=\"danger\" onClick={confirmRemoveMember}>\n//             Confirm Remove\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n\n//       {/* Edit Members Modal */}\n//       <Modal show={showAddMembersModal} onHide={() => setShowAddMembersModal(false)}>\n//         <Modal.Header closeButton>\n//           <Modal.Title>Edit Members</Modal.Title>\n//         </Modal.Header>\n//         <Modal.Body>\n//           <Form.Group className=\"mb-3\">\n//             <Form.Label>Add New Member</Form.Label>\n//             <Form.Select value={newMemberId} onChange={(e) => setNewMemberId(e.target.value)}>\n//               <option value=\"\">Select a member</option>\n//               {users.map((user) => (\n//                 <option key={user._id} value={user._id}>\n//                   {user.name} ({user.email})\n//                 </option>\n//               ))}\n//             </Form.Select>\n//             <Button variant=\"success\" className=\"mt-3\" onClick={handleAddMember}>\n//               Add Member\n//             </Button>\n//           </Form.Group>\n//         </Modal.Body>\n//         <Modal.Footer>\n//           <Button variant=\"secondary\" onClick={() => setShowAddMembersModal(false)}>\n//             Close\n//           </Button>\n//         </Modal.Footer>\n//       </Modal>\n//     </div>\n//   );\n// }\n\n// export default TaskDetails;","map":{"version":3,"names":[],"sources":["F:/Project-Management-App/frontend/src/components/TaskDetails.js"],"sourcesContent":["// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// import React, { useEffect, useState } from 'react';\r\n// import { Button, Form, Modal } from 'react-bootstrap'; // Import modal components from react-bootstrap\r\n// import { useParams } from 'react-router-dom';\r\n// import { tasks, users } from '../DummyData'; // Import tasks and users\r\n// import './TaskDetails.css'; // Import custom CSS\r\n\r\n// function TaskDetails() {\r\n//   const { taskId } = useParams();\r\n//   const [task, setTask] = useState(null);\r\n//   const [taskMembers, setTaskMembers] = useState([]);\r\n//   const [showEditTaskModal, setShowEditTaskModal] = useState(false);\r\n//   const [showAddMembersModal, setShowAddMembersModal] = useState(false);\r\n//   const [showConfirmDeleteModal, setShowConfirmDeleteModal] = useState(false); // To confirm delete\r\n//   const [memberToRemove, setMemberToRemove] = useState(null); // Store member to remove\r\n//   const [editedTask, setEditedTask] = useState({ name: '', description: '', due_date: '', status: '' });\r\n//   const [newMemberId, setNewMemberId] = useState(''); // To store the new member selected\r\n\r\n//   useEffect(() => {\r\n//     const selectedTask = tasks.find((t) => t._id === taskId);\r\n\r\n//     if (selectedTask) {\r\n//       setTask(selectedTask);\r\n//       setEditedTask(selectedTask);\r\n\r\n//       const members = selectedTask.assignedTo.map((userId) => {\r\n//         const user = users.find((u) => u._id === userId);\r\n//         return user ? { ...user } : null;\r\n//       }).filter(Boolean);\r\n\r\n//       setTaskMembers(members);\r\n//     } else {\r\n//       setTask(null);\r\n//     }\r\n//   }, [taskId]);\r\n\r\n//   const handleTaskChange = (e) => {\r\n//     setEditedTask({ ...editedTask, [e.target.name]: e.target.value });\r\n//   };\r\n\r\n//   const handleTaskSave = () => {\r\n//     setTask({ ...editedTask });\r\n//     setShowEditTaskModal(false);\r\n//   };\r\n\r\n//   const handleAddMember = () => {\r\n//     const newMember = users.find((u) => u._id === newMemberId);\r\n//     if (newMember) {\r\n//       setTaskMembers([...taskMembers, newMember]);\r\n//     }\r\n//     setNewMemberId('');\r\n//   };\r\n\r\n//   const handleRemoveMember = (memberId) => {\r\n//     setMemberToRemove(memberId);\r\n//     setShowConfirmDeleteModal(true); // Show confirm modal\r\n//   };\r\n\r\n//   const confirmRemoveMember = () => {\r\n//     const updatedMembers = taskMembers.filter((m) => m._id !== memberToRemove);\r\n//     setTaskMembers(updatedMembers);\r\n//     setShowConfirmDeleteModal(false); // Close modal\r\n//   };\r\n\r\n//   if (!task) {\r\n//     return <div>Loading task details...</div>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h1 className=\"text-center mb-4\" id=\"heading1\">Task Details</h1>\r\n\r\n//       {/* Task Overview Section */}\r\n//       <div className=\"card shadow-sm mb-4\">\r\n//         <div className=\"card-body d-flex justify-content-between\">\r\n//           <div>\r\n//             <h2 className=\"card-title\">{task.name}</h2>\r\n//             <p className=\"card-text\">{task.description}</p>\r\n//             <ul className=\"list-unstyled\">\r\n//               <li><strong>Due Date:</strong> {new Date(task.due_date).toLocaleDateString()}</li>\r\n//               <li>\r\n//                 <strong>Status:</strong>{' '}\r\n//                 <span className={`badge ${task.status === 'In Progress' || task.status === 'Ongoing' ? 'bg-warning' : 'bg-success'}`}>\r\n//                   {task.status}\r\n//                 </span>\r\n//               </li>\r\n//             </ul>\r\n//           </div>\r\n//           <div>\r\n//             <Button variant=\"primary\" onClick={() => setShowEditTaskModal(true)}>\r\n//               Edit Task\r\n//             </Button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Task Members Section */}\r\n//       <div className=\"card shadow-sm\">\r\n//         <div className=\"card-header d-flex justify-content-between\">\r\n//           <h3>Assigned Members</h3>\r\n//           <Button variant=\"primary\" onClick={() => setShowAddMembersModal(true)}>\r\n//             Add Members\r\n//           </Button>\r\n//         </div>\r\n//         <ul className=\"list-group list-group-flush\">\r\n//           {taskMembers.map((member) => (\r\n//             <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={member._id}>\r\n//               <div>\r\n//                 {member.name} - <span className=\"text-muted\">{member.email}</span>\r\n//               </div>\r\n//               <Button variant=\"danger\" onClick={() => handleRemoveMember(member._id)}>\r\n//                 Remove\r\n//               </Button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         {/* <div className=\"card-footer\">\r\n//           <Button variant=\"success\" onClick={() => setShowAddMembersModal(true)}>Add Member</Button>\r\n//         </div> */}\r\n//       </div>\r\n\r\n//       {/* Edit Task Modal */}\r\n//       <Modal show={showEditTaskModal} onHide={() => setShowEditTaskModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Edit Task</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Task Name</Form.Label>\r\n//               <Form.Control type=\"text\" name=\"name\" value={editedTask.name} onChange={handleTaskChange} />\r\n//             </Form.Group>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Description</Form.Label>\r\n//               <Form.Control as=\"textarea\" name=\"description\" value={editedTask.description} onChange={handleTaskChange} />\r\n//             </Form.Group>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Due Date</Form.Label>\r\n//               <Form.Control type=\"date\" name=\"due_date\" value={editedTask.due_date} onChange={handleTaskChange} />\r\n//             </Form.Group>\r\n//             <Form.Group className=\"mb-3\">\r\n//               <Form.Label>Status</Form.Label>\r\n//               <Form.Select name=\"status\" value={editedTask.status} onChange={handleTaskChange}>\r\n//                 <option value=\"Ongoing\">Ongoing</option>\r\n//                 <option value=\"Completed\">Completed</option>\r\n//               </Form.Select>\r\n//             </Form.Group>\r\n//           </Form>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowEditTaskModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//           <Button variant=\"primary\" onClick={handleTaskSave}>\r\n//             Save Changes\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n\r\n//       {/* Confirm Delete Member Modal */}\r\n//       <Modal show={showConfirmDeleteModal} onHide={() => setShowConfirmDeleteModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Confirm Remove Member</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           Are you sure you want to remove this member from the task?\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowConfirmDeleteModal(false)}>\r\n//             Cancel\r\n//           </Button>\r\n//           <Button variant=\"danger\" onClick={confirmRemoveMember}>\r\n//             Confirm Remove\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n\r\n//       {/* Edit Members Modal */}\r\n//       <Modal show={showAddMembersModal} onHide={() => setShowAddMembersModal(false)}>\r\n//         <Modal.Header closeButton>\r\n//           <Modal.Title>Edit Members</Modal.Title>\r\n//         </Modal.Header>\r\n//         <Modal.Body>\r\n//           <Form.Group className=\"mb-3\">\r\n//             <Form.Label>Add New Member</Form.Label>\r\n//             <Form.Select value={newMemberId} onChange={(e) => setNewMemberId(e.target.value)}>\r\n//               <option value=\"\">Select a member</option>\r\n//               {users.map((user) => (\r\n//                 <option key={user._id} value={user._id}>\r\n//                   {user.name} ({user.email})\r\n//                 </option>\r\n//               ))}\r\n//             </Form.Select>\r\n//             <Button variant=\"success\" className=\"mt-3\" onClick={handleAddMember}>\r\n//               Add Member\r\n//             </Button>\r\n//           </Form.Group>\r\n//         </Modal.Body>\r\n//         <Modal.Footer>\r\n//           <Button variant=\"secondary\" onClick={() => setShowAddMembersModal(false)}>\r\n//             Close\r\n//           </Button>\r\n//         </Modal.Footer>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default TaskDetails;\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}